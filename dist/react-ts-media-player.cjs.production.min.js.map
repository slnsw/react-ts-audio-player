{"version":3,"file":"react-ts-media-player.cjs.production.min.js","sources":["../src/Util/CollapseArrayProperty.ts","../src/SrOnly.tsx","../src/Util/CssClasses.ts","../src/ActionButton.tsx","../src/Util/Numbers.ts","../src/ScrubBar.tsx","../src/SubtitleContainer.tsx","../src/Menu.tsx","../src/MenuItem.tsx","../src/SubtitleMenu.tsx","../src/ToggleButton.tsx","../src/TracklistMenu.tsx","../src/TimeUtils.ts","../src/AudioPlayer.tsx"],"sourcesContent":["const collapseArrayProperty = (prop: string|string[] = [], delimiter: string = ' ') => {\n  if (!Array.isArray(prop)) {\n    prop = [prop];\n  }\n  return prop.join(delimiter);\n};\n\nexport default collapseArrayProperty;\n","// @file\n// Screenreader only wrapper.\n\nimport React from 'react';\n\nimport CollapseArrayProperty from './Util/CollapseArrayProperty';\n\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IProps {\n  children?: React.ReactNode;\n  config?: IAudioPlayerConfig;\n}\n\nconst SrOnly: React.FunctionComponent<IProps> = ({ config = {}, children }) => {\n  const classNames = [].concat(CollapseArrayProperty(config.classNames['sr-only']));\n  return <span className={classNames.join(' ')}>{children}</span>;\n};\n\nexport default SrOnly;\n","// @file\n// Generate BEM-scoped CSS classes.\n\nconst CssClasses = (\n  defaultClassName: string,\n  optionalClassName: string = '',\n  suffix: string = '',\n  states: any[] = [],\n): string => {\n  const classes = []\n    .concat(defaultClassName.split(/\\s+/))\n    .concat(optionalClassName.split(/\\s+/))\n    .filter((c) => c && c.length)\n    .map((c) => (suffix.length ? `${c}__${suffix}` : c));\n\n  return classes\n    .reduce(\n      (agg, className) =>\n        agg.concat(\n          ['']\n            .concat(states.filter((s) => s && s.length))\n            .map((state) => `${className}${state.length ? `--${state}` : ''}`),\n        ),\n      [],\n    )\n    .join(' ');\n};\n\nexport default CssClasses;\n","// @file\n// Functional component for an action button.\n\nimport React from 'react';\n\nimport SrOnly from './SrOnly';\nimport CollapseArrayProperty from './Util/CollapseArrayProperty';\nimport CssClasses from './Util/CssClasses';\n\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IProps {\n  btnType: string;\n  enabled?: boolean;\n  hidden?: boolean;\n  onClick?: (e: React.MouseEvent) => void;\n  children?: React.ReactNode;\n  className?: string;\n  config?: IAudioPlayerConfig;\n}\n\nconst ActionButton: React.FunctionComponent<IProps> = ({\n  enabled = true,\n  hidden = false,\n  btnType,\n  onClick,\n  children,\n  className,\n  config = {},\n}) => {\n  const defaultClassName = CollapseArrayProperty(config.classNames[btnType]);\n  const iconClassNames = CollapseArrayProperty(config.icons[btnType]);\n  const iconElem = config.iconElements[btnType] || null;\n  return (\n    <button\n      className={CssClasses(defaultClassName, className || '')}\n      disabled={!enabled}\n      hidden={hidden}\n      onClick={onClick}\n    >\n      <SrOnly config={config}>{children}</SrOnly>\n      {!iconElem && <span className={CssClasses(iconClassNames, '')}></span>}\n      {iconElem}\n    </button>\n  );\n};\n\nexport default ActionButton;\n","export const clampNumber = (num: number, min: number, max: number): number =>\n  Math.max(min, Math.min(max, num));\n","// @file\n// Functional component for an action button.\n\nimport React from 'react';\nimport debounce from 'debounce';\n\nimport CssClasses from './Util/CssClasses';\nimport { clampNumber } from './Util/Numbers';\n\n/**\n * Note: defaultValue is between 0 and 100.\n */\ninterface IProps {\n  defaultValue: number;\n  className?: string;\n  id?: string;\n  label?: string;\n  onClick?: (pos: number) => void;\n  useTooltip?: boolean;\n  useRange?: boolean;\n  useProgress?: boolean;\n  valueToTooltipString?: (pos: number) => string;\n}\n\nconst getOffsetXNative = (\n  e: MouseEvent | TouchEvent,\n  container: HTMLDivElement,\n) => {\n  let offsetX = 0;\n  const rect = container.getBoundingClientRect();\n  if (e.type === 'mousemove') {\n    offsetX = (e as MouseEvent).pageX - rect.left;\n  }\n  if (e.type === 'touchmove') {\n    offsetX = (e as TouchEvent).targetTouches[0].pageX - rect.left;\n  }\n  return offsetX;\n};\n\nconst getOffsetX = (e: React.TouchEvent | React.MouseEvent) => {\n  if (typeof (e as React.MouseEvent).nativeEvent.offsetX === 'number') {\n    return (e as React.MouseEvent).nativeEvent.offsetX;\n  }\n  if (typeof (e as React.TouchEvent).targetTouches === 'object') {\n    const touchE = e as React.TouchEvent;\n    const rect = (touchE.target as HTMLDivElement).getBoundingClientRect();\n    return touchE.targetTouches[0].pageX - rect.left;\n  }\n  return 0;\n};\n\nconst ON_CLICK_DEBOUNCE = 250;\n\ninterface ITooltipProps {\n  title?: string;\n  className?: string;\n  style?: any;\n}\n\nconst ScrubBarTooltip: React.FunctionComponent<ITooltipProps> = ({\n  title,\n  className,\n  style = {},\n}) => {\n  return (\n    <div style={style} className={className || ''}>\n      {title}\n    </div>\n  );\n};\n\ninterface ITooltipOuterProps {\n  wrapperClassName?: string;\n  tooltipClassName?: string;\n  valueToTooltipString?: (pos: number) => string;\n  defaultValue?: number;\n  show?: boolean;\n}\n\nconst ScrubBarTooltipOuter: React.FunctionComponent<ITooltipOuterProps> = ({\n  wrapperClassName,\n  tooltipClassName,\n  valueToTooltipString = () => '',\n  defaultValue = 0,\n  show = false,\n}) => {\n  const outer = React.useRef(null);\n  const [value, setValue] = React.useState(defaultValue);\n\n  const outerWidth = outer.current ? outer.current.clientWidth : 0;\n\n  const content = valueToTooltipString(value) || '';\n\n  return (\n    <div\n      ref={outer}\n      onMouseMove={(e: React.MouseEvent) => {\n        setValue(getOffsetX(e) / outerWidth);\n      }}\n      className={wrapperClassName}\n    >\n      {show && content.length > 0 && (\n        <ScrubBarTooltip\n          title={valueToTooltipString(value)}\n          className={tooltipClassName}\n          style={{\n            left: `${outerWidth * value}px`,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nconst ScrubBar: React.FunctionComponent<IProps> = ({\n  defaultValue = 0,\n  useTooltip = false,\n  useRange = false,\n  useProgress = false,\n  valueToTooltipString = () => '',\n  id,\n  className,\n  label,\n  onClick,\n}: IProps) => {\n  const outer = React.useRef(null);\n  const scrubbing = React.useRef(false);\n\n  const [hover, setHover] = React.useState(false);\n  const [value, setValue] = React.useState(clampNumber(defaultValue, 0, 1));\n  const [offsetX, setOffsetX] = React.useState(0);\n  const [lastUpdate, setLastUpdate] = React.useState(0);\n\n  const derivedId = id || 'scrub-bar';\n\n  const debouncedOnClick =\n    typeof onClick === 'function'\n      ? debounce(onClick, ON_CLICK_DEBOUNCE)\n      : () => {};\n\n  const onDown = (e: React.TouchEvent | React.MouseEvent) => {\n    scrubbing.current = true;\n    setOffsetX(getOffsetX(e));\n  };\n\n  const onUp = () => {\n    if (scrubbing.current) {\n      scrubbing.current = false;\n      setLastUpdate(new Date().getTime());\n    }\n  };\n\n  const onMouseMove = (e: MouseEvent) => {\n    if (scrubbing.current) {\n      setOffsetX(getOffsetXNative(e, outer.current));\n    }\n  };\n\n  const onTouchMove = (e: TouchEvent) => {\n    if (scrubbing.current) {\n      setOffsetX(getOffsetXNative(e, outer.current));\n    }\n  };\n\n  // Set up cursor move and cursor up events on the entire document\n  // so that the scrub can persist even when the user drags outside\n  // the scrub bar.\n  React.useEffect(() => {\n    document.addEventListener('mousemove', onMouseMove, false);\n    document.addEventListener('touchmove', onTouchMove, false);\n    document.addEventListener('mouseup', onUp, false);\n    document.addEventListener('touchend', onUp, false);\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove, false);\n      document.removeEventListener('touchmove', onTouchMove, false);\n      document.removeEventListener('mouseup', onUp, false);\n      document.removeEventListener('touchend', onUp, false);\n    };\n  }, []);\n\n  // Prop update -- set value, don't propagate.\n  React.useEffect(() => {\n    setValue(clampNumber(defaultValue, 0, 100));\n  }, [defaultValue]);\n\n  // State update -- set value, propagate back to parent.\n  React.useEffect(() => {\n    if (scrubbing.current) {\n      const pos = clampNumber(offsetX / outer.current.clientWidth, 0, 1);\n      setValue(pos * 100);\n      debouncedOnClick(pos);\n    }\n  }, [lastUpdate, offsetX]);\n\n  return (\n    <div\n      className={CssClasses(className || '', '', '', [\n        scrubbing.current ? 'scrubbing' : '',\n      ])}\n      onMouseOver={() => setHover(true)}\n      onMouseLeave={() => setHover(false)}\n      onMouseDown={useRange ? () => {} : onDown}\n      onTouchStart={useRange ? () => {} : onDown}\n      ref={outer}\n    >\n      {useTooltip && (\n        <ScrubBarTooltipOuter\n          wrapperClassName={`${className}__wraptooltip`}\n          tooltipClassName={`${className}__tooltip`}\n          show={hover || scrubbing.current}\n          valueToTooltipString={valueToTooltipString}\n          defaultValue={value}\n        />\n      )}\n      {(useProgress || useRange) && (\n        <label\n          htmlFor={\n            useRange ? `${derivedId}__scrubrange` : `${derivedId}__progress`\n          }\n        >\n          <span className=\"sr-only\">\n            {label || ''}\n            {`${value} percent`}\n          </span>\n          {useProgress && (\n            <progress\n              max=\"100\"\n              value={value}\n              className={`${className}__progress`}\n              id={`${derivedId}__progress`}\n            />\n          )}\n          {useRange && (\n            <input\n              className={`${className}__scrubrange`}\n              id={`${derivedId}__scrubrange`}\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              value={value}\n              onMouseDown={onDown}\n              onTouchStart={onDown}\n              onChange={(e) => {\n                setOffsetX(\n                  (parseFloat(e.currentTarget.value) / 100.0) *\n                    outer.current.clientWidth,\n                );\n              }}\n            />\n          )}\n        </label>\n      )}\n      {!useRange && (\n        <div\n          className={[`${className}__fill`].join(' ')}\n          style={{ width: `${value}%` }}\n        >\n          <span className=\"sr-only\">\n            {label || ''}\n            {`${value} percent`}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ScrubBar;\n","// @file\n// Oral Histories subtitle menu.\n\nimport React from 'react';\n\nconst memoiseTrack = (track: TextTrack): string => {\n  if (!track) {\n    return '';\n  }\n  const { kind, mode, language, cues } = track;\n  return [kind, mode, language, cues.length].join(',');\n};\n\ninterface IProps {\n  visible?: boolean;\n  lang?: string;\n  tracks: TextTrack[];\n  id: string;\n  className?: string;\n}\n\nconst SubtitleContainer: React.FunctionComponent<IProps> = ({\n  visible = true,\n  lang,\n  tracks = [],\n  id,\n  className,\n}: IProps) => {\n  const [text, setText] = React.useState('');\n  const [currentTrack, setCurrentTrack] = React.useState(null);\n\n  const cueChange = (e: Event) => {\n    const { activeCues } = e.target as TextTrack;\n\n    let newText = '';\n    let cue;\n\n    let i;\n    for (i = 0; i < activeCues.length; i += 1) {\n      cue = activeCues[i];\n      if (typeof cue.text !== 'undefined') {\n        newText += cue.text;\n      }\n    }\n    setText(newText);\n  };\n\n  React.useEffect(() => {\n    if (currentTrack) {\n      currentTrack.addEventListener('cuechange', cueChange, false);\n    }\n    return () => {\n      if (currentTrack) {\n        currentTrack.removeEventListener('cuechange', cueChange, false);\n      }\n    };\n  }, [memoiseTrack(currentTrack)]);\n\n  React.useEffect(() => {\n    if (lang && lang.length && tracks && tracks.length) {\n      let track = null;\n      let i;\n      for (i = 0; i < tracks.length; i += 1) {\n        if (tracks[i].language === lang) {\n          track = tracks[i];\n          break;\n        }\n      }\n      setCurrentTrack(track);\n    }\n  }, [lang, tracks]);\n\n  return (\n    <div\n      className={[className || '', 'video-wrapper__subtitle-container'].join(\n        ' ',\n      )}\n      hidden={!visible}\n      aria-hidden={!visible}\n      lang={lang}\n      id={id}\n      aria-atomic=\"true\"\n      aria-live=\"polite\"\n      aria-relevant=\"additions text\"\n    >\n      {visible ? text : ' '}\n    </div>\n  );\n};\n\nexport default SubtitleContainer;\n","// @file\r\n// Menu container.\r\n\r\nimport React from 'react';\r\n\r\ninterface IProps {\r\n  id?: string;\r\n  visible?: boolean;\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst Menu: React.FunctionComponent<IProps> = ({\r\n  id,\r\n  visible = false,\r\n  className,\r\n  children,\r\n}: IProps) => {\r\n  return (\r\n    <ol\r\n      className={['video-wrapper__popup-menu', className || ''].join(' ')}\r\n      id={id}\r\n      hidden={!visible}\r\n      aria-expanded={visible}\r\n    >\r\n      {children}\r\n    </ol>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React from 'react';\n\ninterface IProps {\n  label: string;\n  value: string | number | null;\n  selected: boolean;\n  onSelect: (e: React.KeyboardEvent | React.MouseEvent) => void;\n}\n\nconst MenuItem: React.FunctionComponent<IProps> = ({\n  label,\n  value,\n  selected = false,\n  onSelect,\n}: IProps) => {\n  return (\n    <li>\n      <button\n        data-value={value}\n        data-state={selected ? 'active' : 'inactive'}\n        onClick={onSelect}\n        onKeyUp={(e) => {\n          if (e.key === 'Enter') {\n            onSelect(e);\n          }\n        }}\n      >\n        {label}\n      </button>\n    </li>\n  );\n};\n\nexport default MenuItem;\n","// @file\n// Oral Histories subtitle menu.\n\nimport React from 'react';\n\nimport Menu from './Menu';\nimport MenuItem from './MenuItem';\n\ninterface IProps {\n  visible: boolean;\n  id: string;\n  tracks: TextTrackList;\n  selected?: string;\n  onSelect: (selectedLang: string) => void;\n  className?: string;\n}\n\nconst SubtitleMenu: React.FunctionComponent<IProps> = ({\n  visible = false,\n  id,\n  tracks,\n  selected,\n  onSelect,\n  className,\n}: IProps) => {\n  const onSelectLang = (e: React.MouseEvent | React.KeyboardEvent) => {\n    const itemElem = e.target as HTMLElement;\n    const selectedLang = itemElem.getAttribute('data-value') || null;\n    if (typeof onSelect === 'function') {\n      onSelect(selectedLang);\n    }\n  };\n\n  const languageOptions = [\n    <MenuItem\n      key={'_none_'}\n      label={'Off'}\n      value={null}\n      selected={!selected}\n      onSelect={onSelectLang}\n    />,\n  ];\n  let track;\n  let i;\n  if (tracks && tracks.length) {\n    for (i = 0; i < tracks.length; i += 1) {\n      track = tracks[i];\n      languageOptions.push(\n        <MenuItem\n          key={`${track.language}-${i}`}\n          label={track.label}\n          value={track.language}\n          selected={selected && track.language === selected}\n          onSelect={onSelectLang}\n        />,\n      );\n    }\n  }\n\n  return (\n    <Menu\n      className={[className || '', 'subtitles-menu'].join(' ')}\n      id={id}\n      visible={visible}\n    >\n      {languageOptions}\n    </Menu>\n  );\n};\n\nexport default SubtitleMenu;\n","// @file\n// Functional component for a toggle button.\n\nimport React from 'react';\n\nimport SrOnly from './SrOnly';\nimport CollapseArrayProperty from './Util/CollapseArrayProperty';\nimport CssClasses from './Util/CssClasses';\n\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IProps {\n  enabled?: boolean;\n  hidden?: boolean;\n  btnType: string;\n  toggleState?: boolean;\n  children?: React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n  className?: string;\n  config?: IAudioPlayerConfig;\n}\n\nconst ToggleButton: React.FunctionComponent<IProps> = ({\n  enabled = true,\n  hidden = false,\n  btnType,\n  toggleState = false,\n  children,\n  onClick,\n  className,\n  config = {},\n}: IProps) => {\n  const defaultClassName = CollapseArrayProperty(config.classNames[btnType]);\n  const iconClassNamesFalse = CollapseArrayProperty(config.icons[`${btnType}__false`]);\n  const iconClassNamesTrue = CollapseArrayProperty(config.icons[`${btnType}__true`]);\n  const iconElemFalse = config.iconElements[`${btnType}__false`] || null;\n  const iconElemTrue = config.iconElements[`${btnType}__true`] || null;\n  return (\n    <button\n      className={CssClasses(defaultClassName, className || '')}\n      disabled={!enabled}\n      hidden={hidden}\n      onClick={onClick}\n    >\n      <SrOnly config={config}>{children}</SrOnly>\n      {!toggleState && !iconElemFalse && (\n        <span className={CssClasses(iconClassNamesFalse)} />\n      )}\n      {!toggleState && iconElemFalse}\n      {toggleState && !iconElemTrue && (\n        <span className={CssClasses(iconClassNamesTrue)} />\n      )}\n      {toggleState && iconElemTrue}\n    </button>\n  );\n};\n\nexport default ToggleButton;\n","// @file\r\n// Oral Histories subtitle menu.\r\n\r\nimport React from 'react';\r\n\r\nimport Menu from './Menu';\r\nimport MenuItem from './MenuItem';\r\n\r\ninterface IProps {\r\n  tracklist?: AudioTrack[];\r\n  selected?: number;\r\n  onSelect?: (track: number) => void;\r\n  id?: string;\r\n  visible?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst TracklistMenu: React.FunctionComponent<IProps> = ({\r\n  tracklist = [],\r\n  selected = 0,\r\n  visible = false,\r\n  onSelect,\r\n  id,\r\n  className,\r\n}: IProps) => {\r\n  const onSelectTrack = (e: React.MouseEvent | React.KeyboardEvent) => {\r\n    const itemElem = e.target as HTMLElement;\r\n    const indexAttr = itemElem.getAttribute('data-value') || null;\r\n    if (indexAttr === null) {\r\n      return;\r\n    }\r\n    const index = parseInt(indexAttr, 10);\r\n    if (typeof onSelect === 'function') {\r\n      onSelect(index);\r\n    }\r\n  };\r\n\r\n  const trackOptions = tracklist.map((track: AudioTrack, index: number) => {\r\n    return (\r\n      <MenuItem\r\n        key={index}\r\n        label={track.label}\r\n        value={index}\r\n        selected={index === selected}\r\n        onSelect={onSelectTrack}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Menu\r\n      className={[className || '', 'track-menu'].join(' ')}\r\n      id={id}\r\n      visible={visible}\r\n    >\r\n      {trackOptions}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default TracklistMenu;\r\n","// @file\n// Time utilities.\n\nconst strPadLeft = (n: number): string => {\n  if (n < 10) {\n    return `0${n}`;\n  }\n  return n.toString();\n};\n\nexport const toHHMMSS = (str: string): string => {\n  const secNum = parseInt(str, 10);\n  if (isNaN(secNum)) {\n    return '';\n  }\n  const hours = Math.floor(secNum / 3600);\n  const minutes = Math.floor((secNum - hours * 3600) / 60);\n  const seconds = secNum - hours * 3600 - minutes * 60;\n\n  return `${strPadLeft(hours)}:${strPadLeft(minutes)}:${strPadLeft(seconds)}`;\n};\n\nexport const toMMSS = (str: string): string => {\n  const secNum = parseInt(str, 10);\n  if (isNaN(secNum)) {\n    return '';\n  }\n  const minutes = Math.floor(secNum / 60);\n  const seconds = secNum - minutes * 60;\n\n  return `${strPadLeft(minutes)}:${strPadLeft(seconds)}`;\n};\n","// @file\n// Audio player base component.\n\nimport Emitter from 'eventemitter3';\nimport React from 'react';\n\nimport ActionButton from './ActionButton';\nimport ScrubBar from './ScrubBar';\nimport SubtitleContainer from './SubtitleContainer';\nimport SubtitleMenu from './SubtitleMenu';\nimport ToggleButton from './ToggleButton';\nimport TracklistMenu from './TracklistMenu';\n\nimport FontAwesome5 from './Configs/FontAwesome5';\nimport CssClasses from './Util/CssClasses';\nimport { toHHMMSS, toMMSS } from './TimeUtils';\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IPlaylistItem {\n  index: number;\n  label: string;\n  audioUrl: string;\n  transcriptUrl: string | null;\n}\n\ninterface IPlaybackEvent {\n  fileData?: any[];\n  selectedFile?: number;\n  currentTime?: number;\n  duration?: number;\n}\n\ninterface IProps {\n  playlist: IPlaylistItem[];\n  id?: string;\n  className?: string;\n  eventRouter?: Emitter;\n  crossOrigin?: 'anonymous' | 'use-credentials';\n  onEndNextFile?: boolean;\n  config?: IAudioPlayerConfig;\n  singleTrack?: boolean;\n  useRangeOnScrubBar?: boolean;\n  useProgressOnScrubBar?: boolean;\n  onLoad?: (e?: IPlaybackEvent) => void;\n  onPlay?: (e?: IPlaybackEvent) => void;\n  onPause?: (e?: IPlaybackEvent) => void;\n  onEnd?: (e?: IPlaybackEvent) => void;\n  onTimeUpdate?: (e?: IPlaybackEvent) => void;\n}\n\nconst AudioPlayer: React.FunctionComponent<IProps> = ({\n  playlist = [],\n  id = 'audio-player',\n  className,\n  eventRouter,\n  crossOrigin,\n  onEndNextFile = false,\n  config = {},\n  singleTrack = false,\n  useRangeOnScrubBar = false,\n  useProgressOnScrubBar = false,\n  onLoad,\n  onPlay,\n  onPause,\n  onEnd,\n  onTimeUpdate,\n}: IProps) => {\n  const audioElem = React.useRef(null);\n  const timeElapsedElem = React.useRef(null);\n  const durationElem = React.useRef(null);\n\n  const [duration, setDuration] = React.useState(0);\n  const [timestamp, setTimestamp] = React.useState(0);\n  const [fileData, setFileData] = React.useState([]);\n  const [selectedFile, setSelectedFile] = React.useState(0);\n  const [progress, setProgress] = React.useState(0);\n  const [playing, setPlaying] = React.useState(false);\n  const [ended, setEnded] = React.useState(false);\n  const [muted, setMuted] = React.useState(false);\n  const [selectedLanguage, setSelectedLanguage] = React.useState(null);\n  const [showTrackListMenu, setShowTrackListMenu] = React.useState(false);\n  const [showSubtitleMenu, setShowSubtitleMenu] = React.useState(false);\n  const [videoMetadataLoaded, setVideoMetadataLoaded] = React.useState(false);\n\n  const captionsContainerId = `${id}__captions`;\n  const timeIndicatorId = `${id}__time-indicator`;\n  const durationIndicatorId = `${id}__duration-indicator`;\n  const tracklistId = `${id}__track-list`;\n  const subtitleMenuId = `${id}__subtitle-menu`;\n\n  const getTimestampString = (\n    seconds: number = 0,\n    isDuration: boolean = false,\n  ): string => {\n    if (typeof seconds !== 'number') {\n      return '';\n    }\n    if (\n      config.useHoursInTimestamps &&\n      ((isDuration && seconds >= 3600) || duration >= 3600)\n    ) {\n      return toHHMMSS(seconds.toString());\n    }\n    return toMMSS(seconds.toString());\n  };\n\n  React.useEffect(() => {\n    audioElem.current.setAttribute('playsinline', 'playsinline');\n  }, []);\n\n  React.useEffect(() => {\n    setFileData(playlist);\n    setSelectedFile(0);\n  }, [playlist]);\n\n  const canPlayPrev = selectedFile > 0;\n  const canPlayNext = selectedFile < fileData.length - 1;\n\n  React.useEffect(() => {\n    audioElem.current.load();\n    audioElem.current.currentTime = 0;\n    setProgress(0);\n  }, [selectedFile]);\n\n  const selectTrack = (trackNumber: number) => {\n    setPlaying(false);\n    setEnded(false);\n    setVideoMetadataLoaded(false);\n    setSelectedFile(trackNumber);\n    if (typeof onLoad === 'function') {\n      onLoad({ fileData, selectedFile: trackNumber, duration });\n    }\n  };\n\n  const hasVtt = (file: IPlaylistItem) => {\n    return file.transcriptUrl && file.transcriptUrl.length > 0;\n  };\n\n  const subtitleTracks = () => {\n    if (!videoMetadataLoaded) {\n      return [];\n    }\n    return audioElem.current.textTracks;\n  };\n\n  const playable = fileData && fileData.length && videoMetadataLoaded;\n\n  const selectSubtitleLanguage = (lang?: string) => {\n    setShowSubtitleMenu(false);\n    setSelectedLanguage(lang && lang.length ? lang : null);\n  };\n\n  const onLoadedMetadata = () => {\n    setVideoMetadataLoaded(true);\n    selectSubtitleLanguage(selectedLanguage);\n    setDuration(audioElem.current.duration);\n\n    // this.highlighter.selectedFile = this.state.selectedFile;\n    // this.highlighter.updateVideoElement(this.videoElement);\n    // this.highlighter.onVideoElementLoad();\n  };\n\n  const internalOnTimeUpdate = () => {\n    const currentTime = audioElem.current.currentTime;\n    if (duration > 0) {\n      const value = (100 / duration) * currentTime;\n      setProgress(value);\n      setTimestamp(currentTime);\n    }\n    if (typeof onTimeUpdate === 'function') {\n      onTimeUpdate({ fileData, selectedFile, currentTime, duration });\n    }\n  };\n\n  const playPauseAction = () => {\n    if (!playable) {\n      return;\n    }\n    let newPlaying = false;\n    if (audioElem.current.paused) {\n      audioElem.current.play();\n      newPlaying = true;\n    } else {\n      audioElem.current.pause();\n    }\n    const currentTime = audioElem.current.currentTime;\n    setPlaying(newPlaying);\n    setTimestamp(currentTime);\n    if (eventRouter) {\n      eventRouter.emit('state.playing', newPlaying);\n    }\n    if (newPlaying) {\n      if (typeof onPlay === 'function') {\n        onPlay({ fileData, selectedFile, currentTime, duration });\n      }\n    } else {\n      if (typeof onPause === 'function') {\n        onPause({ fileData, selectedFile, currentTime, duration });\n      }\n    }\n  };\n\n  const nextTrackAction = () => {\n    if (canPlayNext) {\n      selectTrack(selectedFile + 1);\n    }\n  };\n\n  const nextTrackAndPlayAction = () => {\n    if (canPlayNext) {\n      nextTrackAction();\n      setTimeout(() => playPauseAction(), 500);\n    }\n  };\n\n  const onEnded = () => {\n    if (onEndNextFile) {\n      nextTrackAndPlayAction();\n      return;\n    }\n    setEnded(true);\n    const currentTime = audioElem.current.currentTime;\n    setTimestamp(currentTime);\n    if (eventRouter) {\n      eventRouter.emit('state.playing', false);\n      eventRouter.emit('state.ended', true);\n    }\n    if (typeof onEnd === 'function') {\n      onEnd({ fileData, selectedFile, currentTime, duration });\n    }\n  };\n\n  const moveBackwardAction = () => {\n    if (!playable) {\n      return;\n    }\n    audioElem.current.currentTime -= config.rewindTime || 5;\n  };\n\n  const moveForwardAction = () => {\n    if (!playable) {\n      return;\n    }\n    audioElem.current.currentTime += config.fastForwardTime || 5;\n  };\n\n  const rewindAction = () => {\n    audioElem.current.currentTime = 0;\n    setEnded(false);\n    setTimestamp(audioElem.current.currentTime);\n    setProgress(0);\n    if (eventRouter) {\n      eventRouter.emit('state.ended', false);\n    }\n  };\n\n  React.useEffect(() => {\n    let i;\n    for (i = 0; i < audioElem.current.textTracks.length; i += 1) {\n      audioElem.current.textTracks[i].mode =\n        audioElem.current.textTracks[i].language === selectedLanguage\n          ? 'showing'\n          : 'hidden';\n    }\n  }, [selectedLanguage]);\n\n  const toggleMuteAction = () => {\n    const newMute = !audioElem.current.muted;\n    audioElem.current.muted = newMute;\n    setMuted(newMute);\n  };\n\n  const handleRemoteAction = (action: string) => {\n    if (action === 'backward') {\n      moveBackwardAction();\n    } else if (action === 'play_pause') {\n      playPauseAction();\n    } else if (action === 'reset') {\n      rewindAction();\n    } else if (action === 'forward') {\n      moveForwardAction();\n    }\n  };\n\n  React.useEffect(() => {\n    if (eventRouter) {\n      eventRouter.on('remote.action', handleRemoteAction);\n    }\n    return () => {\n      if (eventRouter) {\n        eventRouter.off('remote.action', handleRemoteAction);\n      }\n    };\n  }, []);\n\n  const currentFile = fileData[selectedFile] || null;\n\n  return (\n    <div className={CssClasses('video-wrapper', className)}>\n      <audio\n        className={CssClasses('video-element', className)}\n        data-oh-audio-player=\"1\"\n        crossOrigin={crossOrigin}\n        preload=\"metadata\"\n        ref={audioElem}\n        onLoadedMetadata={onLoadedMetadata}\n        onEnded={onEnded}\n        onTimeUpdate={internalOnTimeUpdate}\n        aria-describedby={captionsContainerId}\n      >\n        {currentFile && <source src={currentFile.audioUrl} type=\"audio/mpeg\" />}\n        {currentFile && hasVtt(currentFile) && (\n          <track\n            src={currentFile.transcriptUrl}\n            kind=\"captions\"\n            label=\"English\"\n            srcLang=\"en\"\n          />\n        )}\n      </audio>\n\n      <div className={CssClasses('video-controls', className)}>\n        <ScrubBar\n          defaultValue={progress}\n          className={CssClasses('video-controls', className, 'progress-bar')}\n          onClick={(pos: number) => {\n            audioElem.current.currentTime = pos * duration;\n            setTimestamp(pos * duration);\n          }}\n          useTooltip={config.useTooltip || false}\n          useRange={useRangeOnScrubBar}\n          useProgress={useProgressOnScrubBar}\n          valueToTooltipString={(pos) =>\n            getTimestampString(\n              audioElem.current ? pos * audioElem.current.duration : 0,\n            )\n          }\n        />\n\n        <label className=\"sr-only\" htmlFor={timeIndicatorId}>\n          Time elapsed\n        </label>\n\n        <input\n          className={CssClasses('video-controls', className, 'time-elapsed')}\n          id={timeIndicatorId}\n          readOnly\n          ref={timeElapsedElem}\n          value={getTimestampString(timestamp)}\n        />\n\n        {config.showDuration && (\n          <>\n            <label className=\"sr-only\" htmlFor={durationIndicatorId}>\n              Duration\n            </label>\n\n            <input\n              className={CssClasses('video-controls', className, 'duration')}\n              id={durationIndicatorId}\n              readOnly\n              ref={durationElem}\n              value={getTimestampString(duration, true)}\n            />\n          </>\n        )}\n\n        <div className=\"w-100\" />\n\n        <div\n          className={CssClasses('video-controls', className, 'button-wrapper')}\n        >\n          <ToggleButton\n            btnType=\"tracklist\"\n            aria-controls={tracklistId}\n            enabled={fileData.length > 0 && !singleTrack}\n            onClick={() => {\n              setShowSubtitleMenu(false);\n              setShowTrackListMenu(!showTrackListMenu);\n            }}\n            toggleState={showTrackListMenu}\n            config={config}\n          >\n            Tracklist\n          </ToggleButton>\n\n          <div\n            className={CssClasses(\n              'video-controls',\n              className,\n              'button-wrapper__space',\n            )}\n          />\n\n          <ActionButton\n            btnType=\"previous-audio\"\n            enabled={fileData.length > 1 && canPlayPrev}\n            onClick={() => {\n              if (canPlayPrev) {\n                selectTrack(selectedFile - 1);\n              }\n            }}\n            config={config}\n          >\n            Previous track\n          </ActionButton>\n\n          <ActionButton\n            btnType=\"backward\"\n            onClick={moveBackwardAction}\n            config={config}\n          >\n            Rewind\n          </ActionButton>\n\n          <ToggleButton\n            btnType=\"play\"\n            hidden={ended}\n            onClick={playPauseAction}\n            toggleState={playing}\n            config={config}\n          >\n            {playing ? 'Pause' : 'Play'}\n          </ToggleButton>\n\n          <ActionButton\n            btnType=\"reset\"\n            enabled={ended}\n            hidden={!ended}\n            onClick={rewindAction}\n            config={config}\n          >\n            Restart\n          </ActionButton>\n\n          <ActionButton\n            btnType=\"forward\"\n            onClick={moveForwardAction}\n            config={config}\n          >\n            Fast forward\n          </ActionButton>\n\n          <ActionButton\n            btnType=\"next-audio\"\n            enabled={fileData.length > 1 && canPlayNext}\n            onClick={nextTrackAction}\n            config={config}\n          >\n            Next track\n          </ActionButton>\n\n          <ToggleButton\n            btnType=\"closed-captioning\"\n            aria-controls={subtitleMenuId}\n            enabled={videoMetadataLoaded && hasVtt(currentFile)}\n            onClick={() => {\n              setShowTrackListMenu(false);\n              setShowSubtitleMenu(!showSubtitleMenu);\n            }}\n            toggleState={showSubtitleMenu}\n            config={config}\n          >\n            Closed captioning\n          </ToggleButton>\n\n          <div\n            className={CssClasses(\n              'video-controls',\n              className,\n              'button-wrapper__space',\n            )}\n          />\n\n          <ToggleButton\n            btnType=\"mute\"\n            onClick={toggleMuteAction}\n            toggleState={muted}\n            config={config}\n          >\n            Mute\n          </ToggleButton>\n        </div>\n      </div>\n\n      <SubtitleMenu\n        visible={showSubtitleMenu}\n        id={subtitleMenuId}\n        tracks={subtitleTracks()}\n        selected={selectedLanguage}\n        onSelect={selectSubtitleLanguage}\n      />\n\n      <TracklistMenu\n        visible={!singleTrack && showTrackListMenu}\n        id={tracklistId}\n        tracklist={fileData}\n        selected={selectedFile}\n        onSelect={(trackNumber) => {\n          setShowTrackListMenu(false);\n          selectTrack(trackNumber);\n        }}\n      />\n\n      <SubtitleContainer\n        visible={selectedLanguage !== null}\n        lang={selectedLanguage}\n        tracks={subtitleTracks()}\n        id={captionsContainerId}\n      />\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n\nexport const defaultConfigs = {\n  FontAwesome5,\n};\n"],"names":["collapseArrayProperty","prop","delimiter","Array","isArray","join","SrOnly","config","children","classNames","concat","CollapseArrayProperty","React","className","CssClasses","defaultClassName","optionalClassName","suffix","states","split","filter","c","length","map","reduce","agg","s","state","ActionButton","enabled","hidden","btnType","onClick","iconClassNames","icons","iconElem","iconElements","disabled","clampNumber","num","min","max","Math","getOffsetXNative","e","container","offsetX","rect","getBoundingClientRect","type","pageX","left","targetTouches","getOffsetX","nativeEvent","touchE","target","ScrubBarTooltip","style","title","ScrubBarTooltipOuter","wrapperClassName","tooltipClassName","valueToTooltipString","defaultValue","show","outer","useRef","useState","value","setValue","outerWidth","current","clientWidth","content","ref","onMouseMove","ScrubBar","useTooltip","useRange","useProgress","id","label","scrubbing","hover","setHover","setOffsetX","lastUpdate","setLastUpdate","derivedId","debouncedOnClick","debounce","onDown","onUp","Date","getTime","onTouchMove","useEffect","document","addEventListener","removeEventListener","pos","onMouseOver","onMouseLeave","onMouseDown","onTouchStart","htmlFor","onChange","parseFloat","currentTarget","width","SubtitleContainer","track","visible","lang","tracks","text","setText","currentTrack","setCurrentTrack","cueChange","cue","i","activeCues","newText","kind","mode","language","cues","Menu","MenuItem","selected","onSelect","onKeyUp","key","SubtitleMenu","onSelectLang","selectedLang","getAttribute","languageOptions","push","ToggleButton","toggleState","iconClassNamesFalse","iconClassNamesTrue","iconElemFalse","iconElemTrue","TracklistMenu","tracklist","onSelectTrack","indexAttr","index","parseInt","trackOptions","strPadLeft","n","toString","playlist","eventRouter","crossOrigin","onEndNextFile","singleTrack","useRangeOnScrubBar","useProgressOnScrubBar","onLoad","onPlay","onPause","onEnd","onTimeUpdate","audioElem","timeElapsedElem","durationElem","duration","setDuration","timestamp","setTimestamp","fileData","setFileData","selectedFile","setSelectedFile","progress","setProgress","playing","setPlaying","ended","setEnded","muted","setMuted","selectedLanguage","setSelectedLanguage","showTrackListMenu","setShowTrackListMenu","showSubtitleMenu","setShowSubtitleMenu","videoMetadataLoaded","setVideoMetadataLoaded","captionsContainerId","timeIndicatorId","durationIndicatorId","tracklistId","subtitleMenuId","getTimestampString","seconds","isDuration","useHoursInTimestamps","str","secNum","isNaN","hours","floor","minutes","toHHMMSS","toMMSS","setAttribute","canPlayPrev","canPlayNext","load","currentTime","selectTrack","trackNumber","hasVtt","file","transcriptUrl","subtitleTracks","textTracks","playable","selectSubtitleLanguage","playPauseAction","newPlaying","paused","play","pause","emit","nextTrackAction","moveBackwardAction","rewindTime","moveForwardAction","fastForwardTime","rewindAction","handleRemoteAction","action","on","off","currentFile","preload","onLoadedMetadata","onEnded","setTimeout","src","audioUrl","srcLang","readOnly","showDuration","newMute"],"mappings":"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"}