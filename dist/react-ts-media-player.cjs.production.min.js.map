{"version":3,"file":"react-ts-media-player.cjs.production.min.js","sources":["../src/SrOnly.tsx","../src/Util/CssClasses.ts","../src/ActionButton.tsx","../src/Util/Numbers.ts","../src/ScrubBar.tsx","../src/SubtitleContainer.tsx","../src/Menu.tsx","../src/MenuItem.tsx","../src/SubtitleMenu.tsx","../src/ToggleButton.tsx","../src/TracklistMenu.tsx","../src/TimeUtils.ts","../src/AudioPlayer.tsx"],"sourcesContent":["// @file\n// Screenreader only wrapper.\n\nimport React from 'react';\n\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IProps {\n  children?: React.ReactNode;\n  config?: IAudioPlayerConfig;\n}\n\nconst SrOnly: React.FunctionComponent<IProps> = ({ config = {}, children }) => {\n  const classNames = [].concat(config.classNames['sr-only'] || []);\n  return <span className={classNames.join(' ')}>{children}</span>;\n};\n\nexport default SrOnly;\n","// @file\n// Generate BEM-scoped CSS classes.\n\nconst CssClasses = (defaultClassName: string, optionalClassName: string = '', suffix: string = '', states: any[] = []): string => {\n  const classes = [].concat(defaultClassName.split(/\\s+/))\n    .concat(optionalClassName.split(/\\s+/))\n    .filter(c => c && c.length)\n    .map(c => suffix.length ? `${c}__${suffix}` : c);\n\n  return classes.reduce((agg, className) => agg\n    .concat([''].concat(states.filter(s => s && s.length))\n    .map(state => `${className}${state.length ? `--${state}` : ''}`)\n  ), []).join(' ');\n};\n\nexport default CssClasses;\n","// @file\n// Functional component for an action button.\n\nimport React from 'react';\n\nimport SrOnly from './SrOnly';\nimport CssClasses from './Util/CssClasses';\n\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IProps {\n  btnType: string;\n  enabled?: boolean;\n  hidden?: boolean;\n  onClick?: (e: React.MouseEvent) => void;\n  children?: React.ReactNode;\n  className?: string;\n  config?: IAudioPlayerConfig;\n}\n\nconst ActionButton: React.FunctionComponent<IProps> = ({\n  enabled = true,\n  hidden = false,\n  btnType,\n  onClick,\n  children,\n  className,\n  config = {},\n}) => {\n  const defaultClassName = (config.classNames[btnType] || []).join(' ');\n  const iconClassNames = (config.icons[btnType] || []).join(' ');\n  const iconElem = config.iconElements[btnType] || null;\n  return (\n    <button\n      className={CssClasses(defaultClassName, className || '')}\n      disabled={!enabled}\n      hidden={hidden}\n      onClick={onClick}\n    >\n      <SrOnly config={config}>{children}</SrOnly>\n      {!iconElem && <span className={CssClasses(iconClassNames, '')}></span>}\n      {iconElem}\n    </button>\n  );\n};\n\nexport default ActionButton;\n","export const clampNumber = (\n  num: number,\n  min: number,\n  max: number,\n): number => Math.max(min, Math.min(max, num));\n","// @file\n// Functional component for an action button.\n\nimport React from 'react';\nimport debounce from 'debounce';\n\nimport { clampNumber } from './Util/Numbers';\n\n/**\n * Note: defaultValue is between 0 and 100.\n */\ninterface IProps {\n  defaultValue: number;\n  className?: string;\n  onClick?: (pos: number) => void;\n  useTooltip?: boolean;\n  valueToTooltipString?: (pos: number) => string;\n}\n\nconst getOffsetXNative = (e: MouseEvent | TouchEvent, container: HTMLDivElement) => {\n  let offsetX = 0;\n  const rect = container.getBoundingClientRect();\n  if (e.type === 'mousemove') {\n    offsetX = (e as MouseEvent).pageX - rect.left;\n  }\n  if (e.type === 'touchmove') {\n    offsetX = (e as TouchEvent).targetTouches[0].pageX - rect.left;\n  }\n  return offsetX;\n};\n\nconst getOffsetX = (e: React.TouchEvent | React.MouseEvent) => {\n  if (typeof (e as React.MouseEvent).nativeEvent.offsetX === 'number') {\n    return (e as React.MouseEvent).nativeEvent.offsetX;\n  }\n  if (typeof (e as React.TouchEvent).targetTouches === 'object') {\n    const touchE = e as React.TouchEvent;\n    const rect = (touchE.target as HTMLDivElement).getBoundingClientRect();\n    return touchE.targetTouches[0].pageX - rect.left;\n  }\n  return 0;\n};\n\nconst ON_CLICK_DEBOUNCE = 250;\n\ninterface ITooltipProps {\n  title?: string;\n  className?: string;\n  style?: any;\n}\n\nconst ScrubBarTooltip: React.FunctionComponent<ITooltipProps> = ({\n  title,\n  className,\n  style = {},\n}) => {\n  return (\n    <div style={style} className={className || ''}>\n      { title }\n    </div>\n  );\n};\n\ninterface ITooltipOuterProps {\n  tooltipClassName?: string;\n  valueToTooltipString?: (pos: number) => string;\n  defaultValue?: number;\n  show?: boolean;\n}\n\nconst ScrubBarTooltipOuter: React.FunctionComponent<ITooltipOuterProps> = ({\n  tooltipClassName,\n  valueToTooltipString = () => '',\n  defaultValue = 0,\n  show = false,\n}) => {\n  const outer = React.useRef(null);\n  const [value, setValue] = React.useState(defaultValue);\n\n  const outerWidth = outer.current\n    ? outer.current.clientWidth\n    : 0;\n  \n  const content = valueToTooltipString(value) || '';\n\n  return (\n    <div\n      ref={outer}\n      style={{\n        position: 'absolute',\n        top: '-100%',\n        left: 0,\n        width: '100%',\n        height: '300%'\n      }}\n      onMouseMove={(e: React.MouseEvent) => {\n        setValue(getOffsetX(e) / outerWidth);\n      }}\n    >\n      {show && content.length > 0 && (\n        <ScrubBarTooltip\n          title={valueToTooltipString(value)}\n          className={tooltipClassName}\n          style={{\n            left: `${outerWidth * value}px`\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nconst ScrubBar: React.FunctionComponent<IProps> = ({\n  defaultValue = 0,\n  useTooltip = false,\n  valueToTooltipString = () => '',\n  className,\n  onClick,\n}: IProps) => {\n  const outer = React.useRef(null);\n  const scrubbing = React.useRef(false);\n\n  const [hover, setHover] = React.useState(false);\n  const [value, setValue] = React.useState(clampNumber(defaultValue, 0, 1));\n  const [offsetX, setOffsetX] = React.useState(0);\n  const [lastUpdate, setLastUpdate] = React.useState(0);\n\n  const debouncedOnClick = typeof onClick === 'function'\n    ? debounce(onClick, ON_CLICK_DEBOUNCE)\n    : () => {};\n\n  const onDown = (e: React.TouchEvent | React.MouseEvent) => {\n    scrubbing.current = true;\n    setOffsetX(getOffsetX(e));\n  };\n\n  const onUp = () => {\n    if (scrubbing.current) {\n      scrubbing.current = false;\n      setLastUpdate((new Date()).getTime());\n    }\n  };\n\n  const onMouseMove = (e: MouseEvent) => {\n    if (scrubbing.current) {\n      setOffsetX(getOffsetXNative(e, outer.current));\n    }\n  };\n\n  const onTouchMove = (e: TouchEvent) => {\n    if (scrubbing.current) {\n      setOffsetX(getOffsetXNative(e, outer.current));\n    }\n  };\n\n  // Set up cursor move and cursor up events on the entire document\n  // so that the scrub can persist even when the user drags outside\n  // the scrub bar. \n  React.useEffect(() => {\n    document.addEventListener('mousemove', onMouseMove, false);\n    document.addEventListener('touchmove', onTouchMove, false);\n    document.addEventListener('mouseup', onUp, false);\n    document.addEventListener('touchend', onUp, false);\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove, false);\n      document.removeEventListener('touchmove', onTouchMove, false);\n      document.removeEventListener('mouseup', onUp, false);\n      document.removeEventListener('touchend', onUp, false);\n    };\n  }, []);\n\n  // Prop update -- set value, don't propagate.\n  React.useEffect(() => {\n    setValue(clampNumber(defaultValue, 0, 100));\n  }, [defaultValue]);\n\n  // State update -- set value, propagate back to parent.\n  React.useEffect(() => {\n    if (scrubbing.current) {\n      const pos = clampNumber(offsetX / outer.current.clientWidth, 0, 1);\n      setValue(pos * 100);\n      debouncedOnClick(pos);\n    }\n  }, [lastUpdate, offsetX]);\n\n  return (\n    <div\n      className={[className || ''].join(' ')}\n      onMouseOver={() => setHover(true)}\n      onMouseLeave={() => setHover(false)}\n      onMouseDown={onDown}\n      onTouchStart={onDown}\n      ref={outer}\n    >\n      {useTooltip && (\n        <ScrubBarTooltipOuter\n          tooltipClassName={`${className}__tooltip`}\n          show={(hover || scrubbing.current)}\n          valueToTooltipString={valueToTooltipString}\n          defaultValue={value}\n        />\n      )}\n      <div\n        className={[`${className}__fill`].join(' ')}\n        style={{ width: `${value}%` }}\n      >\n        <span className=\"sr-only\">{`${value} percent`}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ScrubBar;\n","// @file\n// Oral Histories subtitle menu.\n\nimport React from 'react';\n\nconst memoiseTrack = (track: TextTrack): string => {\n  if (!track) {\n    return '';\n  }\n  const { kind, mode, language, cues } = track;\n  return [kind, mode, language, cues.length].join(',');\n};\n\ninterface IProps {\n  visible?: boolean;\n  lang?: string;\n  tracks: TextTrack[];\n  id: string;\n  className?: string;\n}\n\nconst SubtitleContainer: React.FunctionComponent<IProps> = ({\n  visible = true,\n  lang,\n  tracks = [],\n  id,\n  className,\n}: IProps) => {\n  const [text, setText] = React.useState('');\n  const [currentTrack, setCurrentTrack] = React.useState(null);\n\n  const cueChange = (e: Event) => {\n    const { activeCues } = e.target as TextTrack;\n\n    let newText = '';\n    let cue;\n\n    let i;\n    for (i = 0; i < activeCues.length; i += 1) {\n      cue = activeCues[i];\n      if (typeof cue.text !== 'undefined') {\n        newText += cue.text;\n      }\n    }\n    setText(newText);\n  };\n\n  React.useEffect(() => {\n    if (currentTrack) {\n      currentTrack.addEventListener('cuechange', cueChange, false);\n    }\n    return () => {\n      if (currentTrack) {\n        currentTrack.removeEventListener('cuechange', cueChange, false);\n      }\n    };\n  }, [memoiseTrack(currentTrack)]);\n\n  React.useEffect(() => {\n    if (lang && lang.length && tracks && tracks.length) {\n      let track = null;\n      let i;\n      for (i = 0; i < tracks.length; i += 1) {\n        if (tracks[i].language === lang) {\n          track = tracks[i];\n          break;\n        }\n      }\n      setCurrentTrack(track);\n    }\n  }, [lang, tracks]);\n\n  return (\n    <div\n      className={[className || '', 'video-wrapper__subtitle-container'].join(\n        ' ',\n      )}\n      hidden={!visible}\n      aria-hidden={!visible}\n      lang={lang}\n      id={id}\n      aria-atomic=\"true\"\n      aria-live=\"polite\"\n      aria-relevant=\"additions text\"\n    >\n      {visible ? text : ' '}\n    </div>\n  );\n};\n\nexport default SubtitleContainer;\n","// @file\r\n// Menu container.\r\n\r\nimport React from 'react';\r\n\r\ninterface IProps {\r\n  id?: string;\r\n  visible?: boolean;\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst Menu: React.FunctionComponent<IProps> = ({\r\n  id,\r\n  visible = false,\r\n  className,\r\n  children,\r\n}: IProps) => {\r\n  return (\r\n    <ol\r\n      className={['video-wrapper__popup-menu', className || ''].join(' ')}\r\n      id={id}\r\n      hidden={!visible}\r\n      aria-expanded={visible}\r\n    >\r\n      {children}\r\n    </ol>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React from 'react';\n\ninterface IProps {\n  label: string;\n  value: string | number | null;\n  selected: boolean;\n  onSelect: (e: React.KeyboardEvent | React.MouseEvent) => void;\n}\n\nconst MenuItem: React.FunctionComponent<IProps> = ({\n  label,\n  value,\n  selected = false,\n  onSelect,\n}: IProps) => {\n  return (\n    <li>\n      <button\n        data-value={value}\n        data-state={selected ? 'active' : 'inactive'}\n        onClick={onSelect}\n        onKeyUp={(e) => {\n          if (e.key === 'Enter') {\n            onSelect(e);\n          }\n        }}\n      >\n        {label}\n      </button>\n    </li>\n  );\n};\n\nexport default MenuItem;\n","// @file\n// Oral Histories subtitle menu.\n\nimport React from 'react';\n\nimport Menu from './Menu';\nimport MenuItem from './MenuItem';\n\ninterface IProps {\n  visible: boolean;\n  id: string;\n  tracks: TextTrackList;\n  selected?: string;\n  onSelect: (selectedLang: string) => void;\n  className?: string;\n}\n\nconst SubtitleMenu: React.FunctionComponent<IProps> = ({\n  visible = false,\n  id,\n  tracks,\n  selected,\n  onSelect,\n  className,\n}: IProps) => {\n  const onSelectLang = (e: React.MouseEvent | React.KeyboardEvent) => {\n    const itemElem = e.target as HTMLElement;\n    const selectedLang = itemElem.getAttribute('data-value') || null;\n    if (typeof onSelect === 'function') {\n      onSelect(selectedLang);\n    }\n  };\n\n  const languageOptions = [\n    <MenuItem\n      key={'_none_'}\n      label={'Off'}\n      value={null}\n      selected={!selected}\n      onSelect={onSelectLang}\n    />,\n  ];\n  let track;\n  let i;\n  if (tracks && tracks.length) {\n    for (i = 0; i < tracks.length; i += 1) {\n      track = tracks[i];\n      languageOptions.push(\n        <MenuItem\n          key={`${track.language}-${i}`}\n          label={track.label}\n          value={track.language}\n          selected={selected && track.language === selected}\n          onSelect={onSelectLang}\n        />,\n      );\n    }\n  }\n\n  return (\n    <Menu\n      className={[className || '', 'subtitles-menu'].join(' ')}\n      id={id}\n      visible={visible}\n    >\n      {languageOptions}\n    </Menu>\n  );\n};\n\nexport default SubtitleMenu;\n","// @file\n// Functional component for a toggle button.\n\nimport React from 'react';\n\nimport SrOnly from './SrOnly';\nimport CssClasses from './Util/CssClasses';\n\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IProps {\n  enabled?: boolean;\n  hidden?: boolean;\n  btnType: string;\n  toggleState?: boolean;\n  children?: React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n  className?: string;\n  config?: IAudioPlayerConfig;\n}\n\nconst ToggleButton: React.FunctionComponent<IProps> = ({\n  enabled = true,\n  hidden = false,\n  btnType,\n  toggleState = false,\n  children,\n  onClick,\n  className,\n  config = {},\n}: IProps) => {\n  const defaultClassName = (config.classNames[btnType] || []).join(' ');\n  const iconClassNamesFalse = (config.icons[`${btnType}__false`] || []).join(' ');\n  const iconClassNamesTrue = (config.icons[`${btnType}__true`] || []).join(' ');\n  const iconElemFalse = config.iconElements[`${btnType}__false`] || null;\n  const iconElemTrue = config.iconElements[`${btnType}__true`] || null;\n  return (\n    <button\n      className={CssClasses(defaultClassName, className || '')}\n      disabled={!enabled}\n      hidden={hidden}\n      onClick={onClick}\n    >\n      <SrOnly config={config}>{children}</SrOnly>\n      {!toggleState && !iconElemFalse && (<span\n        className={CssClasses(iconClassNamesFalse)}\n      />)}\n      {!toggleState && iconElemFalse}\n      {toggleState && !iconElemTrue && (<span\n        className={CssClasses(iconClassNamesTrue)}\n      />)}\n      {toggleState && iconElemTrue}\n    </button>\n  );\n};\n\nexport default ToggleButton;\n","// @file\r\n// Oral Histories subtitle menu.\r\n\r\nimport React from 'react';\r\n\r\nimport Menu from './Menu';\r\nimport MenuItem from './MenuItem';\r\n\r\ninterface IProps {\r\n  tracklist?: AudioTrack[];\r\n  selected?: number;\r\n  onSelect?: (track: number) => void;\r\n  id?: string;\r\n  visible?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst TracklistMenu: React.FunctionComponent<IProps> = ({\r\n  tracklist = [],\r\n  selected = 0,\r\n  visible = false,\r\n  onSelect,\r\n  id,\r\n  className,\r\n}: IProps) => {\r\n  const onSelectTrack = (e: React.MouseEvent | React.KeyboardEvent) => {\r\n    const itemElem = e.target as HTMLElement;\r\n    const indexAttr = itemElem.getAttribute('data-value') || null;\r\n    if (indexAttr === null) {\r\n      return;\r\n    }\r\n    const index = parseInt(indexAttr, 10);\r\n    if (typeof onSelect === 'function') {\r\n      onSelect(index);\r\n    }\r\n  };\r\n\r\n  const trackOptions = tracklist.map((track: AudioTrack, index: number) => {\r\n    return (\r\n      <MenuItem\r\n        key={index}\r\n        label={track.label}\r\n        value={index}\r\n        selected={index === selected}\r\n        onSelect={onSelectTrack}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Menu\r\n      className={[className || '', 'track-menu'].join(' ')}\r\n      id={id}\r\n      visible={visible}\r\n    >\r\n      {trackOptions}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default TracklistMenu;\r\n","// @file\n// Time utilities.\n\nconst strPadLeft = (n: number): string => {\n  if (n < 10) {\n    return `0${n}`;\n  }\n  return n.toString();\n};\n\nexport const toHHMMSS = (str: string): string => {\n  const secNum = parseInt(str, 10);\n  if (isNaN(secNum)) {\n    return '';\n  }\n  const hours = Math.floor(secNum / 3600);\n  const minutes = Math.floor((secNum - hours * 3600) / 60);\n  const seconds = secNum - hours * 3600 - minutes * 60;\n\n  return `${strPadLeft(hours)}:${strPadLeft(minutes)}:${strPadLeft(seconds)}`;\n};\n\nexport const toMMSS = (str: string): string => {\n  const secNum = parseInt(str, 10);\n  if (isNaN(secNum)) {\n    return '';\n  }\n  const minutes = Math.floor(secNum / 60);\n  const seconds = secNum - minutes * 60;\n\n  return `${strPadLeft(minutes)}:${strPadLeft(seconds)}`;\n};\n","// @file\n// Audio player base component.\n\nimport Emitter from 'eventemitter3';\nimport React from 'react';\n\nimport ActionButton from './ActionButton';\nimport ScrubBar from './ScrubBar';\nimport SubtitleContainer from './SubtitleContainer';\nimport SubtitleMenu from './SubtitleMenu';\nimport ToggleButton from './ToggleButton';\nimport TracklistMenu from './TracklistMenu';\n\nimport FontAwesome5 from './Configs/FontAwesome5';\nimport CssClasses from './Util/CssClasses';\nimport { toHHMMSS, toMMSS } from './TimeUtils';\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IPlaylistItem {\n  index: number;\n  label: string;\n  audioUrl: string;\n  transcriptUrl: string | null;\n}\n\ninterface IProps {\n  playlist: IPlaylistItem[];\n  id?: string;\n  className?: string;\n  eventRouter?: Emitter;\n  crossOrigin?: 'anonymous' | 'use-credentials';\n  onEndNextFile?: boolean;\n  config?: IAudioPlayerConfig;\n  singleTrack?: boolean;\n}\n\nconst AudioPlayer: React.FunctionComponent<IProps> = ({\n  playlist = [],\n  id = 'audio-player',\n  className,\n  eventRouter,\n  crossOrigin,\n  onEndNextFile = false,\n  config = {},\n  singleTrack = false,\n}: IProps) => {\n  const audioElem = React.useRef(null);\n  const timeElapsedElem = React.useRef(null);\n  const durationElem = React.useRef(null);\n\n  const [duration, setDuration] = React.useState(0);\n  const [timestamp, setTimestamp] = React.useState(0);\n  const [fileData, setFileData] = React.useState([]);\n  const [selectedFile, setSelectedFile] = React.useState(0);\n  const [progress, setProgress] = React.useState(0);\n  const [playing, setPlaying] = React.useState(false);\n  const [ended, setEnded] = React.useState(false);\n  const [muted, setMuted] = React.useState(false);\n  const [selectedLanguage, setSelectedLanguage] = React.useState(null);\n  const [showTrackListMenu, setShowTrackListMenu] = React.useState(false);\n  const [showSubtitleMenu, setShowSubtitleMenu] = React.useState(false);\n  const [videoMetadataLoaded, setVideoMetadataLoaded] = React.useState(false);\n\n  const captionsContainerId = `${id}__captions`;\n  const timeIndicatorId = `${id}__time-indicator`;\n  const durationIndicatorId = `${id}__duration-indicator`;\n  const tracklistId = `${id}__track-list`;\n  const subtitleMenuId = `${id}__subtitle-menu`;\n\n  const getTimestampString = (\n    seconds: number = 0,\n    isDuration: boolean = false,\n  ): string => {\n    if (typeof seconds !== 'number') {\n      return '';\n    }\n    if (\n      config.useHoursInTimestamps\n      && ((isDuration && seconds >= 3600) || duration >= 3600)\n    ) {\n      return toHHMMSS(seconds.toString());\n    }\n    return toMMSS(seconds.toString());\n  };\n\n  React.useEffect(() => {\n    audioElem.current.setAttribute('playsinline', 'playsinline');\n  }, []);\n\n  React.useEffect(() => {\n    setFileData(playlist);\n    setSelectedFile(0);\n  }, [playlist]);\n\n  const canPlayPrev = selectedFile > 0;\n  const canPlayNext = selectedFile < fileData.length - 1;\n\n  React.useEffect(() => {\n    audioElem.current.load();\n    audioElem.current.currentTime = 0;\n    setProgress(0);\n  }, [selectedFile]);\n\n  const selectTrack = (trackNumber: number) => {\n    setPlaying(false);\n    setEnded(false);\n    setVideoMetadataLoaded(false);\n    setSelectedFile(trackNumber);\n  };\n\n  const hasVtt = (file: IPlaylistItem) => {\n    return file.transcriptUrl && file.transcriptUrl.length > 0;\n  };\n\n  const subtitleTracks = () => {\n    if (!videoMetadataLoaded) {\n      return [];\n    }\n    return audioElem.current.textTracks;\n  };\n\n  const playable = fileData && fileData.length && videoMetadataLoaded;\n\n  const selectSubtitleLanguage = (lang?: string) => {\n    setShowSubtitleMenu(false);\n    setSelectedLanguage(lang && lang.length ? lang : null);\n  };\n\n  const onLoadedMetadata = () => {\n    setVideoMetadataLoaded(true);\n    selectSubtitleLanguage(selectedLanguage);\n    setDuration(audioElem.current.duration);\n\n    // this.highlighter.selectedFile = this.state.selectedFile;\n    // this.highlighter.updateVideoElement(this.videoElement);\n    // this.highlighter.onVideoElementLoad();\n  };\n\n  const onTimeUpdate = () => {\n    if (duration > 0) {\n      const value =\n        (100 / duration) * audioElem.current.currentTime;\n      setProgress(value);\n      setTimestamp(audioElem.current.currentTime);\n    }\n  };\n\n  const playPauseAction = () => {\n    if (!playable) {\n      return;\n    }\n    let newPlaying = false;\n    if (audioElem.current.paused) {\n      audioElem.current.play();\n      newPlaying = true;\n    } else {\n      audioElem.current.pause();\n    }\n    setPlaying(newPlaying);\n    setTimestamp(audioElem.current.currentTime);\n    if (eventRouter) {\n      eventRouter.emit('state.playing', newPlaying);\n    }\n  };\n\n  const nextTrackAction = () => {\n    if (canPlayNext) {\n      selectTrack(selectedFile + 1);\n    }\n  };\n\n  const nextTrackAndPlayAction = () => {\n    if (canPlayNext) {\n      nextTrackAction();\n      setTimeout(() => playPauseAction(), 500);\n    }\n  };\n\n  const onEnded = () => {\n    if (onEndNextFile) {\n      nextTrackAndPlayAction();\n      return;\n    }\n    setEnded(true);\n    setTimestamp(audioElem.current.currentTime);\n    if (eventRouter) {\n      eventRouter.emit('state.playing', false);\n      eventRouter.emit('state.ended', true);\n    }\n  };\n\n  const moveBackwardAction = () => {\n    if (!playable) {\n      return;\n    }\n    audioElem.current.currentTime -= (config.rewindTime || 5);\n  };\n\n  const moveForwardAction = () => {\n    if (!playable) {\n      return;\n    }\n    audioElem.current.currentTime += (config.fastForwardTime || 5);\n  };\n\n  const rewindAction = () => {\n    audioElem.current.currentTime = 0;\n    setEnded(false);\n    setTimestamp(audioElem.current.currentTime);\n    setProgress(0);\n    if (eventRouter) {\n      eventRouter.emit('state.ended', false);\n    }\n  };\n\n  React.useEffect(() => {\n    let i;\n    for (i = 0; i < audioElem.current.textTracks.length; i += 1) {\n      audioElem.current.textTracks[i].mode =\n        audioElem.current.textTracks[i].language === selectedLanguage\n          ? 'showing'\n          : 'hidden';\n    }\n  }, [selectedLanguage]);\n\n  const toggleMuteAction = () => {\n    const newMute = !audioElem.current.muted;\n    audioElem.current.muted = newMute;\n    setMuted(newMute);\n  };\n\n  const handleRemoteAction = (action: string) => {\n    if (action === 'backward') {\n      moveBackwardAction();\n    } else if (action === 'play_pause') {\n      playPauseAction();\n    } else if (action === 'reset') {\n      rewindAction();\n    } else if (action === 'forward') {\n      moveForwardAction();\n    }\n  };\n\n  React.useEffect(() => {\n    if (eventRouter) {\n      eventRouter.on('remote.action', handleRemoteAction);\n    }\n    return () => {\n      if (eventRouter) {\n        eventRouter.off('remote.action', handleRemoteAction);\n      }\n    };\n  }, []);\n\n  const currentFile = fileData[selectedFile] || null;\n\n  return (\n    <div className={CssClasses('video-wrapper', className)}>\n      <audio\n        className={CssClasses('video-element', className)}\n        data-oh-audio-player=\"1\"\n        crossOrigin={crossOrigin}\n        preload=\"metadata\"\n        ref={audioElem}\n        onLoadedMetadata={onLoadedMetadata}\n        onEnded={onEnded}\n        onTimeUpdate={onTimeUpdate}\n        aria-describedby={captionsContainerId}\n      >\n        {currentFile && <source src={currentFile.audioUrl} type=\"audio/mpeg\" />}\n        {currentFile && hasVtt(currentFile) && (\n          <track\n            src={currentFile.transcriptUrl}\n            kind=\"captions\"\n            label=\"English\"\n            srcLang=\"en\"\n          />\n        )}\n      </audio>\n\n      <div className={CssClasses('video-controls', className)}>\n        <ScrubBar\n          defaultValue={progress}\n          className=\"video-controls__progress-bar\"\n          onClick={(pos: number) => {\n            console.log(pos);\n            audioElem.current.currentTime = pos * duration;\n            setTimestamp(pos * duration);\n          }}\n          useTooltip={config.useTooltip || false}\n          valueToTooltipString={(pos) => getTimestampString(\n            audioElem.current\n              ? pos * audioElem.current.duration\n              : 0\n          )}\n        />\n\n        <label className=\"sr-only\" htmlFor={timeIndicatorId}>\n          Time elapsed\n        </label>\n\n        <input\n          className={CssClasses('video-controls', className, 'time-elapsed')}\n          id={timeIndicatorId}\n          readOnly\n          ref={timeElapsedElem}\n          value={getTimestampString(timestamp)}\n        />\n\n        {config.showDuration && (\n          <>\n            <label className=\"sr-only\" htmlFor={durationIndicatorId}>\n              Duration\n            </label>\n\n            <input\n              className={CssClasses('video-controls', className, 'duration')}\n              id={durationIndicatorId}\n              readOnly\n              ref={durationElem}\n              value={getTimestampString(duration, true)}\n            />\n          </>\n        )}\n\n        <div className=\"w-100\" />\n\n        <div className={CssClasses('video-controls', className, 'button-wrapper')}>\n          <ToggleButton\n            btnType=\"tracklist\"\n            aria-controls={tracklistId}\n            enabled={fileData.length > 0 && !singleTrack}\n            onClick={() => {\n              setShowSubtitleMenu(false);\n              setShowTrackListMenu(!showTrackListMenu);\n            }}\n            toggleState={showTrackListMenu}\n            config={config}\n          >\n            Tracklist\n          </ToggleButton>\n\n          <div className={CssClasses('video-controls', className, 'button-wrapper__space')} />\n\n          <ActionButton\n            btnType=\"previous-audio\"\n            enabled={fileData.length > 1 && canPlayPrev}\n            onClick={() => {\n              if (canPlayPrev) {\n                selectTrack(selectedFile - 1);\n              }\n            }}\n            config={config}\n          >\n            Previous track\n          </ActionButton>\n\n          <ActionButton\n            btnType=\"backward\"\n            onClick={moveBackwardAction}\n            config={config}\n          >\n            Rewind\n          </ActionButton>\n\n          <ToggleButton\n            btnType=\"play\"\n            hidden={ended}\n            onClick={playPauseAction}\n            toggleState={playing}\n            config={config}\n          >\n            {playing ? 'Pause' : 'Play'}\n          </ToggleButton>\n\n          <ActionButton\n            btnType=\"reset\"\n            enabled={ended}\n            hidden={!ended}\n            onClick={rewindAction}\n            config={config}\n          >\n            Restart\n          </ActionButton>\n\n          <ActionButton\n            btnType=\"forward\"\n            onClick={moveForwardAction}\n            config={config}\n          >\n            Fast forward\n          </ActionButton>\n\n          <ActionButton\n            btnType=\"next-audio\"\n            enabled={fileData.length > 1 && canPlayNext}\n            onClick={nextTrackAction}\n            config={config}\n          >\n            Next track\n          </ActionButton>\n\n          <ToggleButton\n            btnType=\"closed-captioning\"\n            aria-controls={subtitleMenuId}\n            enabled={videoMetadataLoaded && hasVtt(currentFile)}\n            onClick={() => {\n              setShowTrackListMenu(false);\n              setShowSubtitleMenu(!showSubtitleMenu);\n            }}\n            toggleState={showSubtitleMenu}\n            config={config}\n          >\n            Closed captioning\n          </ToggleButton>\n\n          <div className={CssClasses('video-controls', className, 'button-wrapper__space')} />\n\n          <ToggleButton\n            btnType=\"mute\"\n            onClick={toggleMuteAction}\n            toggleState={muted}\n            config={config}\n          >\n            Mute\n          </ToggleButton>\n        </div>\n      </div>\n\n      <SubtitleMenu\n        visible={showSubtitleMenu}\n        id={subtitleMenuId}\n        tracks={subtitleTracks()}\n        selected={selectedLanguage}\n        onSelect={selectSubtitleLanguage}\n      />\n\n      <TracklistMenu\n        visible={!singleTrack && showTrackListMenu}\n        id={tracklistId}\n        tracklist={fileData}\n        selected={selectedFile}\n        onSelect={(trackNumber) => {\n          setShowTrackListMenu(false);\n          selectTrack(trackNumber);\n        }}\n      />\n\n      <SubtitleContainer\n        visible={selectedLanguage !== null}\n        lang={selectedLanguage}\n        tracks={subtitleTracks()}\n        id={captionsContainerId}\n      />\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n\nexport const defaultConfigs = {\n  FontAwesome5,\n};\n"],"names":["SrOnly","config","children","classNames","concat","React","className","join","CssClasses","defaultClassName","optionalClassName","suffix","states","split","filter","c","length","map","reduce","agg","s","state","ActionButton","enabled","hidden","btnType","onClick","iconClassNames","icons","iconElem","iconElements","disabled","clampNumber","num","min","max","Math","getOffsetXNative","e","container","offsetX","rect","getBoundingClientRect","type","pageX","left","targetTouches","getOffsetX","nativeEvent","touchE","target","ScrubBarTooltip","style","title","ScrubBarTooltipOuter","tooltipClassName","valueToTooltipString","defaultValue","show","outer","useRef","useState","value","setValue","outerWidth","current","clientWidth","content","ref","position","top","width","height","onMouseMove","ScrubBar","useTooltip","scrubbing","hover","setHover","setOffsetX","lastUpdate","setLastUpdate","debouncedOnClick","debounce","onDown","onUp","Date","getTime","onTouchMove","useEffect","document","addEventListener","removeEventListener","pos","onMouseOver","onMouseLeave","onMouseDown","onTouchStart","SubtitleContainer","track","visible","lang","tracks","id","text","setText","currentTrack","setCurrentTrack","cueChange","cue","i","activeCues","newText","kind","mode","language","cues","Menu","MenuItem","selected","onSelect","onKeyUp","key","label","SubtitleMenu","onSelectLang","selectedLang","getAttribute","languageOptions","push","ToggleButton","toggleState","iconClassNamesFalse","iconClassNamesTrue","iconElemFalse","iconElemTrue","TracklistMenu","tracklist","onSelectTrack","indexAttr","index","parseInt","trackOptions","strPadLeft","n","toString","playlist","eventRouter","crossOrigin","onEndNextFile","singleTrack","audioElem","timeElapsedElem","durationElem","duration","setDuration","timestamp","setTimestamp","fileData","setFileData","selectedFile","setSelectedFile","progress","setProgress","playing","setPlaying","ended","setEnded","muted","setMuted","selectedLanguage","setSelectedLanguage","showTrackListMenu","setShowTrackListMenu","showSubtitleMenu","setShowSubtitleMenu","videoMetadataLoaded","setVideoMetadataLoaded","captionsContainerId","timeIndicatorId","durationIndicatorId","tracklistId","subtitleMenuId","getTimestampString","seconds","isDuration","useHoursInTimestamps","str","secNum","isNaN","hours","floor","minutes","toHHMMSS","toMMSS","setAttribute","canPlayPrev","canPlayNext","load","currentTime","selectTrack","trackNumber","hasVtt","file","transcriptUrl","subtitleTracks","textTracks","playable","selectSubtitleLanguage","playPauseAction","newPlaying","paused","play","pause","emit","nextTrackAction","moveBackwardAction","rewindTime","moveForwardAction","fastForwardTime","rewindAction","handleRemoteAction","action","on","off","currentFile","preload","onLoadedMetadata","onEnded","setTimeout","onTimeUpdate","src","audioUrl","srcLang","console","log","htmlFor","readOnly","showDuration","newMute"],"mappings":"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"}