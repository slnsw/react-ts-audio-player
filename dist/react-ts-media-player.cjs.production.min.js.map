{"version":3,"file":"react-ts-media-player.cjs.production.min.js","sources":["../src/SrOnly.tsx","../src/Util/CssClasses.ts","../src/ActionButton.tsx","../src/Util/Numbers.ts","../src/ScrubBar.tsx","../src/SubtitleContainer.tsx","../src/Menu.tsx","../src/MenuItem.tsx","../src/SubtitleMenu.tsx","../src/ToggleButton.tsx","../src/TracklistMenu.tsx","../src/TimeUtils.ts","../src/AudioPlayer.tsx"],"sourcesContent":["// @file\r\n// Screenreader only wrapper.\r\n\r\nimport React from 'react';\r\n\r\nimport { IAudioPlayerConfig } from './Types';\r\n\r\ninterface IProps {\r\n  children?: React.ReactNode;\r\n  config?: IAudioPlayerConfig;\r\n}\r\n\r\nconst SrOnly: React.FunctionComponent<IProps> = ({ config = {}, children }) => {\r\n  const classNames = [].concat(config.classNames['sr-only'] || []);\r\n  return <span className={classNames.join(' ')}>{children}</span>;\r\n};\r\n\r\nexport default SrOnly;\r\n","// @file\r\n// Generate BEM-scoped CSS classes.\r\n\r\nconst CssClasses = (\r\n  defaultClassName: string,\r\n  optionalClassName: string = '',\r\n  suffix: string = '',\r\n  states: any[] = [],\r\n): string => {\r\n  const classes = []\r\n    .concat(defaultClassName.split(/\\s+/))\r\n    .concat(optionalClassName.split(/\\s+/))\r\n    .filter((c) => c && c.length)\r\n    .map((c) => (suffix.length ? `${c}__${suffix}` : c));\r\n\r\n  return classes\r\n    .reduce(\r\n      (agg, className) =>\r\n        agg.concat(\r\n          ['']\r\n            .concat(states.filter((s) => s && s.length))\r\n            .map((state) => `${className}${state.length ? `--${state}` : ''}`),\r\n        ),\r\n      [],\r\n    )\r\n    .join(' ');\r\n};\r\n\r\nexport default CssClasses;\r\n","// @file\r\n// Functional component for an action button.\r\n\r\nimport React from 'react';\r\n\r\nimport SrOnly from './SrOnly';\r\nimport CssClasses from './Util/CssClasses';\r\n\r\nimport { IAudioPlayerConfig } from './Types';\r\n\r\ninterface IProps {\r\n  btnType: string;\r\n  enabled?: boolean;\r\n  hidden?: boolean;\r\n  onClick?: (e: React.MouseEvent) => void;\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  config?: IAudioPlayerConfig;\r\n}\r\n\r\nconst ActionButton: React.FunctionComponent<IProps> = ({\r\n  enabled = true,\r\n  hidden = false,\r\n  btnType,\r\n  onClick,\r\n  children,\r\n  className,\r\n  config = {},\r\n}) => {\r\n  const defaultClassName = (config.classNames[btnType] || []).join(' ');\r\n  const iconClassNames = (config.icons[btnType] || []).join(' ');\r\n  const iconElem = config.iconElements[btnType] || null;\r\n  return (\r\n    <button\r\n      className={CssClasses(defaultClassName, className || '')}\r\n      disabled={!enabled}\r\n      hidden={hidden}\r\n      onClick={onClick}\r\n    >\r\n      <SrOnly config={config}>{children}</SrOnly>\r\n      {!iconElem && <span className={CssClasses(iconClassNames, '')}></span>}\r\n      {iconElem}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ActionButton;\r\n","export const clampNumber = (num: number, min: number, max: number): number =>\r\n  Math.max(min, Math.min(max, num));\r\n","// @file\r\n// Functional component for an action button.\r\n\r\nimport React from 'react';\r\nimport debounce from 'debounce';\r\n\r\nimport CssClasses from './Util/CssClasses';\r\nimport { clampNumber } from './Util/Numbers';\r\n\r\n/**\r\n * Note: defaultValue is between 0 and 100.\r\n */\r\ninterface IProps {\r\n  defaultValue: number;\r\n  className?: string;\r\n  id?: string;\r\n  label?: string;\r\n  onClick?: (pos: number) => void;\r\n  useTooltip?: boolean;\r\n  useRange?: boolean;\r\n  useProgress?: boolean;\r\n  valueToTooltipString?: (pos: number) => string;\r\n}\r\n\r\nconst getOffsetXNative = (\r\n  e: MouseEvent | TouchEvent,\r\n  container: HTMLDivElement,\r\n) => {\r\n  let offsetX = 0;\r\n  const rect = container.getBoundingClientRect();\r\n  if (e.type === 'mousemove') {\r\n    offsetX = (e as MouseEvent).pageX - rect.left;\r\n  }\r\n  if (e.type === 'touchmove') {\r\n    offsetX = (e as TouchEvent).targetTouches[0].pageX - rect.left;\r\n  }\r\n  return offsetX;\r\n};\r\n\r\nconst getOffsetX = (e: React.TouchEvent | React.MouseEvent) => {\r\n  if (typeof (e as React.MouseEvent).nativeEvent.offsetX === 'number') {\r\n    return (e as React.MouseEvent).nativeEvent.offsetX;\r\n  }\r\n  if (typeof (e as React.TouchEvent).targetTouches === 'object') {\r\n    const touchE = e as React.TouchEvent;\r\n    const rect = (touchE.target as HTMLDivElement).getBoundingClientRect();\r\n    return touchE.targetTouches[0].pageX - rect.left;\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst ON_CLICK_DEBOUNCE = 250;\r\n\r\ninterface ITooltipProps {\r\n  title?: string;\r\n  className?: string;\r\n  style?: any;\r\n}\r\n\r\nconst ScrubBarTooltip: React.FunctionComponent<ITooltipProps> = ({\r\n  title,\r\n  className,\r\n  style = {},\r\n}) => {\r\n  return (\r\n    <div style={style} className={className || ''}>\r\n      {title}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface ITooltipOuterProps {\r\n  wrapperClassName?: string;\r\n  tooltipClassName?: string;\r\n  valueToTooltipString?: (pos: number) => string;\r\n  defaultValue?: number;\r\n  show?: boolean;\r\n}\r\n\r\nconst ScrubBarTooltipOuter: React.FunctionComponent<ITooltipOuterProps> = ({\r\n  wrapperClassName,\r\n  tooltipClassName,\r\n  valueToTooltipString = () => '',\r\n  defaultValue = 0,\r\n  show = false,\r\n}) => {\r\n  const outer = React.useRef(null);\r\n  const [value, setValue] = React.useState(defaultValue);\r\n\r\n  const outerWidth = outer.current ? outer.current.clientWidth : 0;\r\n\r\n  const content = valueToTooltipString(value) || '';\r\n\r\n  return (\r\n    <div\r\n      ref={outer}\r\n      onMouseMove={(e: React.MouseEvent) => {\r\n        setValue(getOffsetX(e) / outerWidth);\r\n      }}\r\n      className={wrapperClassName}\r\n    >\r\n      {show && content.length > 0 && (\r\n        <ScrubBarTooltip\r\n          title={valueToTooltipString(value)}\r\n          className={tooltipClassName}\r\n          style={{\r\n            left: `${outerWidth * value}px`,\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ScrubBar: React.FunctionComponent<IProps> = ({\r\n  defaultValue = 0,\r\n  useTooltip = false,\r\n  useRange = false,\r\n  useProgress = false,\r\n  valueToTooltipString = () => '',\r\n  id,\r\n  className,\r\n  label,\r\n  onClick,\r\n}: IProps) => {\r\n  const outer = React.useRef(null);\r\n  const scrubbing = React.useRef(false);\r\n\r\n  const [hover, setHover] = React.useState(false);\r\n  const [value, setValue] = React.useState(clampNumber(defaultValue, 0, 1));\r\n  const [offsetX, setOffsetX] = React.useState(0);\r\n  const [lastUpdate, setLastUpdate] = React.useState(0);\r\n\r\n  const derivedId = id || 'scrub-bar';\r\n\r\n  const debouncedOnClick =\r\n    typeof onClick === 'function'\r\n      ? debounce(onClick, ON_CLICK_DEBOUNCE)\r\n      : () => {};\r\n\r\n  const onDown = (e: React.TouchEvent | React.MouseEvent) => {\r\n    scrubbing.current = true;\r\n    setOffsetX(getOffsetX(e));\r\n  };\r\n\r\n  const onUp = () => {\r\n    if (scrubbing.current) {\r\n      scrubbing.current = false;\r\n      setLastUpdate(new Date().getTime());\r\n    }\r\n  };\r\n\r\n  const onMouseMove = (e: MouseEvent) => {\r\n    if (scrubbing.current) {\r\n      setOffsetX(getOffsetXNative(e, outer.current));\r\n    }\r\n  };\r\n\r\n  const onTouchMove = (e: TouchEvent) => {\r\n    if (scrubbing.current) {\r\n      setOffsetX(getOffsetXNative(e, outer.current));\r\n    }\r\n  };\r\n\r\n  // Set up cursor move and cursor up events on the entire document\r\n  // so that the scrub can persist even when the user drags outside\r\n  // the scrub bar.\r\n  React.useEffect(() => {\r\n    document.addEventListener('mousemove', onMouseMove, false);\r\n    document.addEventListener('touchmove', onTouchMove, false);\r\n    document.addEventListener('mouseup', onUp, false);\r\n    document.addEventListener('touchend', onUp, false);\r\n    return () => {\r\n      document.removeEventListener('mousemove', onMouseMove, false);\r\n      document.removeEventListener('touchmove', onTouchMove, false);\r\n      document.removeEventListener('mouseup', onUp, false);\r\n      document.removeEventListener('touchend', onUp, false);\r\n    };\r\n  }, []);\r\n\r\n  // Prop update -- set value, don't propagate.\r\n  React.useEffect(() => {\r\n    setValue(clampNumber(defaultValue, 0, 100));\r\n  }, [defaultValue]);\r\n\r\n  // State update -- set value, propagate back to parent.\r\n  React.useEffect(() => {\r\n    if (scrubbing.current) {\r\n      const pos = clampNumber(offsetX / outer.current.clientWidth, 0, 1);\r\n      setValue(pos * 100);\r\n      debouncedOnClick(pos);\r\n    }\r\n  }, [lastUpdate, offsetX]);\r\n\r\n  return (\r\n    <div\r\n      className={CssClasses(className || '', '', '', [\r\n        scrubbing.current ? 'scrubbing' : '',\r\n      ])}\r\n      onMouseOver={() => setHover(true)}\r\n      onMouseLeave={() => setHover(false)}\r\n      onMouseDown={useRange ? () => {} : onDown}\r\n      onTouchStart={useRange ? () => {} : onDown}\r\n      ref={outer}\r\n    >\r\n      {useTooltip && (\r\n        <ScrubBarTooltipOuter\r\n          wrapperClassName={`${className}__wraptooltip`}\r\n          tooltipClassName={`${className}__tooltip`}\r\n          show={hover || scrubbing.current}\r\n          valueToTooltipString={valueToTooltipString}\r\n          defaultValue={value}\r\n        />\r\n      )}\r\n      {(useProgress || useRange) && (\r\n        <label\r\n          htmlFor={\r\n            useRange ? `${derivedId}__scrubrange` : `${derivedId}__progress`\r\n          }\r\n        >\r\n          <span className=\"sr-only\">\r\n            {label || ''}\r\n            {`${value} percent`}\r\n          </span>\r\n          {useProgress && (\r\n            <progress\r\n              max=\"100\"\r\n              value={value}\r\n              className={`${className}__progress`}\r\n              id={`${derivedId}__progress`}\r\n            />\r\n          )}\r\n          {useRange && (\r\n            <input\r\n              className={`${className}__scrubrange`}\r\n              id={`${derivedId}__scrubrange`}\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={value}\r\n              onMouseDown={onDown}\r\n              onTouchStart={onDown}\r\n              onChange={(e) => {\r\n                setOffsetX(\r\n                  (parseFloat(e.currentTarget.value) / 100.0) *\r\n                    outer.current.clientWidth,\r\n                );\r\n              }}\r\n            />\r\n          )}\r\n        </label>\r\n      )}\r\n      {!useRange && (\r\n        <div\r\n          className={[`${className}__fill`].join(' ')}\r\n          style={{ width: `${value}%` }}\r\n        >\r\n          <span className=\"sr-only\">\r\n            {label || ''}\r\n            {`${value} percent`}\r\n          </span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrubBar;\r\n","// @file\r\n// Oral Histories subtitle menu.\r\n\r\nimport React from 'react';\r\n\r\nconst memoiseTrack = (track: TextTrack): string => {\r\n  if (!track) {\r\n    return '';\r\n  }\r\n  const { kind, mode, language, cues } = track;\r\n  return [kind, mode, language, cues.length].join(',');\r\n};\r\n\r\ninterface IProps {\r\n  visible?: boolean;\r\n  lang?: string;\r\n  tracks: TextTrack[];\r\n  id: string;\r\n  className?: string;\r\n}\r\n\r\nconst SubtitleContainer: React.FunctionComponent<IProps> = ({\r\n  visible = true,\r\n  lang,\r\n  tracks = [],\r\n  id,\r\n  className,\r\n}: IProps) => {\r\n  const [text, setText] = React.useState('');\r\n  const [currentTrack, setCurrentTrack] = React.useState(null);\r\n\r\n  const cueChange = (e: Event) => {\r\n    const { activeCues } = e.target as TextTrack;\r\n\r\n    let newText = '';\r\n    let cue;\r\n\r\n    let i;\r\n    for (i = 0; i < activeCues.length; i += 1) {\r\n      cue = activeCues[i];\r\n      if (typeof cue.text !== 'undefined') {\r\n        newText += cue.text;\r\n      }\r\n    }\r\n    setText(newText);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (currentTrack) {\r\n      currentTrack.addEventListener('cuechange', cueChange, false);\r\n    }\r\n    return () => {\r\n      if (currentTrack) {\r\n        currentTrack.removeEventListener('cuechange', cueChange, false);\r\n      }\r\n    };\r\n  }, [memoiseTrack(currentTrack)]);\r\n\r\n  React.useEffect(() => {\r\n    if (lang && lang.length && tracks && tracks.length) {\r\n      let track = null;\r\n      let i;\r\n      for (i = 0; i < tracks.length; i += 1) {\r\n        if (tracks[i].language === lang) {\r\n          track = tracks[i];\r\n          break;\r\n        }\r\n      }\r\n      setCurrentTrack(track);\r\n    }\r\n  }, [lang, tracks]);\r\n\r\n  return (\r\n    <div\r\n      className={[className || '', 'video-wrapper__subtitle-container'].join(\r\n        ' ',\r\n      )}\r\n      hidden={!visible}\r\n      aria-hidden={!visible}\r\n      lang={lang}\r\n      id={id}\r\n      aria-atomic=\"true\"\r\n      aria-live=\"polite\"\r\n      aria-relevant=\"additions text\"\r\n    >\r\n      {visible ? text : ' '}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubtitleContainer;\r\n","// @file\r\n// Menu container.\r\n\r\nimport React from 'react';\r\n\r\ninterface IProps {\r\n  id?: string;\r\n  visible?: boolean;\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst Menu: React.FunctionComponent<IProps> = ({\r\n  id,\r\n  visible = false,\r\n  className,\r\n  children,\r\n}: IProps) => {\r\n  return (\r\n    <ol\r\n      className={['video-wrapper__popup-menu', className || ''].join(' ')}\r\n      id={id}\r\n      hidden={!visible}\r\n      aria-expanded={visible}\r\n    >\r\n      {children}\r\n    </ol>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React from 'react';\r\n\r\ninterface IProps {\r\n  label: string;\r\n  value: string | number | null;\r\n  selected: boolean;\r\n  onSelect: (e: React.KeyboardEvent | React.MouseEvent) => void;\r\n}\r\n\r\nconst MenuItem: React.FunctionComponent<IProps> = ({\r\n  label,\r\n  value,\r\n  selected = false,\r\n  onSelect,\r\n}: IProps) => {\r\n  return (\r\n    <li>\r\n      <button\r\n        data-value={value}\r\n        data-state={selected ? 'active' : 'inactive'}\r\n        onClick={onSelect}\r\n        onKeyUp={(e) => {\r\n          if (e.key === 'Enter') {\r\n            onSelect(e);\r\n          }\r\n        }}\r\n      >\r\n        {label}\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default MenuItem;\r\n","// @file\r\n// Oral Histories subtitle menu.\r\n\r\nimport React from 'react';\r\n\r\nimport Menu from './Menu';\r\nimport MenuItem from './MenuItem';\r\n\r\ninterface IProps {\r\n  visible: boolean;\r\n  id: string;\r\n  tracks: TextTrackList;\r\n  selected?: string;\r\n  onSelect: (selectedLang: string) => void;\r\n  className?: string;\r\n}\r\n\r\nconst SubtitleMenu: React.FunctionComponent<IProps> = ({\r\n  visible = false,\r\n  id,\r\n  tracks,\r\n  selected,\r\n  onSelect,\r\n  className,\r\n}: IProps) => {\r\n  const onSelectLang = (e: React.MouseEvent | React.KeyboardEvent) => {\r\n    const itemElem = e.target as HTMLElement;\r\n    const selectedLang = itemElem.getAttribute('data-value') || null;\r\n    if (typeof onSelect === 'function') {\r\n      onSelect(selectedLang);\r\n    }\r\n  };\r\n\r\n  const languageOptions = [\r\n    <MenuItem\r\n      key={'_none_'}\r\n      label={'Off'}\r\n      value={null}\r\n      selected={!selected}\r\n      onSelect={onSelectLang}\r\n    />,\r\n  ];\r\n  let track;\r\n  let i;\r\n  if (tracks && tracks.length) {\r\n    for (i = 0; i < tracks.length; i += 1) {\r\n      track = tracks[i];\r\n      languageOptions.push(\r\n        <MenuItem\r\n          key={`${track.language}-${i}`}\r\n          label={track.label}\r\n          value={track.language}\r\n          selected={selected && track.language === selected}\r\n          onSelect={onSelectLang}\r\n        />,\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Menu\r\n      className={[className || '', 'subtitles-menu'].join(' ')}\r\n      id={id}\r\n      visible={visible}\r\n    >\r\n      {languageOptions}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default SubtitleMenu;\r\n","// @file\r\n// Functional component for a toggle button.\r\n\r\nimport React from 'react';\r\n\r\nimport SrOnly from './SrOnly';\r\nimport CssClasses from './Util/CssClasses';\r\n\r\nimport { IAudioPlayerConfig } from './Types';\r\n\r\ninterface IProps {\r\n  enabled?: boolean;\r\n  hidden?: boolean;\r\n  btnType: string;\r\n  toggleState?: boolean;\r\n  children?: React.ReactNode;\r\n  onClick?: (e: React.MouseEvent) => void;\r\n  className?: string;\r\n  config?: IAudioPlayerConfig;\r\n}\r\n\r\nconst ToggleButton: React.FunctionComponent<IProps> = ({\r\n  enabled = true,\r\n  hidden = false,\r\n  btnType,\r\n  toggleState = false,\r\n  children,\r\n  onClick,\r\n  className,\r\n  config = {},\r\n}: IProps) => {\r\n  const defaultClassName = (config.classNames[btnType] || []).join(' ');\r\n  const iconClassNamesFalse = (config.icons[`${btnType}__false`] || []).join(\r\n    ' ',\r\n  );\r\n  const iconClassNamesTrue = (config.icons[`${btnType}__true`] || []).join(' ');\r\n  const iconElemFalse = config.iconElements[`${btnType}__false`] || null;\r\n  const iconElemTrue = config.iconElements[`${btnType}__true`] || null;\r\n  return (\r\n    <button\r\n      className={CssClasses(defaultClassName, className || '')}\r\n      disabled={!enabled}\r\n      hidden={hidden}\r\n      onClick={onClick}\r\n    >\r\n      <SrOnly config={config}>{children}</SrOnly>\r\n      {!toggleState && !iconElemFalse && (\r\n        <span className={CssClasses(iconClassNamesFalse)} />\r\n      )}\r\n      {!toggleState && iconElemFalse}\r\n      {toggleState && !iconElemTrue && (\r\n        <span className={CssClasses(iconClassNamesTrue)} />\r\n      )}\r\n      {toggleState && iconElemTrue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ToggleButton;\r\n","// @file\r\n// Oral Histories subtitle menu.\r\n\r\nimport React from 'react';\r\n\r\nimport Menu from './Menu';\r\nimport MenuItem from './MenuItem';\r\n\r\ninterface IProps {\r\n  tracklist?: AudioTrack[];\r\n  selected?: number;\r\n  onSelect?: (track: number) => void;\r\n  id?: string;\r\n  visible?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst TracklistMenu: React.FunctionComponent<IProps> = ({\r\n  tracklist = [],\r\n  selected = 0,\r\n  visible = false,\r\n  onSelect,\r\n  id,\r\n  className,\r\n}: IProps) => {\r\n  const onSelectTrack = (e: React.MouseEvent | React.KeyboardEvent) => {\r\n    const itemElem = e.target as HTMLElement;\r\n    const indexAttr = itemElem.getAttribute('data-value') || null;\r\n    if (indexAttr === null) {\r\n      return;\r\n    }\r\n    const index = parseInt(indexAttr, 10);\r\n    if (typeof onSelect === 'function') {\r\n      onSelect(index);\r\n    }\r\n  };\r\n\r\n  const trackOptions = tracklist.map((track: AudioTrack, index: number) => {\r\n    return (\r\n      <MenuItem\r\n        key={index}\r\n        label={track.label}\r\n        value={index}\r\n        selected={index === selected}\r\n        onSelect={onSelectTrack}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Menu\r\n      className={[className || '', 'track-menu'].join(' ')}\r\n      id={id}\r\n      visible={visible}\r\n    >\r\n      {trackOptions}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default TracklistMenu;\r\n","// @file\r\n// Time utilities.\r\n\r\nconst strPadLeft = (n: number): string => {\r\n  if (n < 10) {\r\n    return `0${n}`;\r\n  }\r\n  return n.toString();\r\n};\r\n\r\nexport const toHHMMSS = (str: string): string => {\r\n  const secNum = parseInt(str, 10);\r\n  if (isNaN(secNum)) {\r\n    return '';\r\n  }\r\n  const hours = Math.floor(secNum / 3600);\r\n  const minutes = Math.floor((secNum - hours * 3600) / 60);\r\n  const seconds = secNum - hours * 3600 - minutes * 60;\r\n\r\n  return `${strPadLeft(hours)}:${strPadLeft(minutes)}:${strPadLeft(seconds)}`;\r\n};\r\n\r\nexport const toMMSS = (str: string): string => {\r\n  const secNum = parseInt(str, 10);\r\n  if (isNaN(secNum)) {\r\n    return '';\r\n  }\r\n  const minutes = Math.floor(secNum / 60);\r\n  const seconds = secNum - minutes * 60;\r\n\r\n  return `${strPadLeft(minutes)}:${strPadLeft(seconds)}`;\r\n};\r\n","// @file\r\n// Audio player base component.\r\n\r\nimport Emitter from 'eventemitter3';\r\nimport React from 'react';\r\n\r\nimport ActionButton from './ActionButton';\r\nimport ScrubBar from './ScrubBar';\r\nimport SubtitleContainer from './SubtitleContainer';\r\nimport SubtitleMenu from './SubtitleMenu';\r\nimport ToggleButton from './ToggleButton';\r\nimport TracklistMenu from './TracklistMenu';\r\n\r\nimport FontAwesome5 from './Configs/FontAwesome5';\r\nimport CssClasses from './Util/CssClasses';\r\nimport { toHHMMSS, toMMSS } from './TimeUtils';\r\nimport { IAudioPlayerConfig } from './Types';\r\n\r\ninterface IPlaylistItem {\r\n  index: number;\r\n  label: string;\r\n  audioUrl: string;\r\n  transcriptUrl: string | null;\r\n}\r\n\r\ninterface IPlaybackEvent {\r\n  fileData?: any[];\r\n  selectedFile?: number;\r\n  currentTime?: number;\r\n}\r\n\r\ninterface IProps {\r\n  playlist: IPlaylistItem[];\r\n  id?: string;\r\n  className?: string;\r\n  eventRouter?: Emitter;\r\n  crossOrigin?: 'anonymous' | 'use-credentials';\r\n  onEndNextFile?: boolean;\r\n  config?: IAudioPlayerConfig;\r\n  singleTrack?: boolean;\r\n  useRangeOnScrubBar?: boolean;\r\n  useProgressOnScrubBar?: boolean;\r\n  onLoad?: (e?: IPlaybackEvent) => void;\r\n  onPlay?: (e?: IPlaybackEvent) => void;\r\n  onPause?: (e?: IPlaybackEvent) => void;\r\n  onEnd?: (e?: IPlaybackEvent) => void;\r\n}\r\n\r\nconst AudioPlayer: React.FunctionComponent<IProps> = ({\r\n  playlist = [],\r\n  id = 'audio-player',\r\n  className,\r\n  eventRouter,\r\n  crossOrigin,\r\n  onEndNextFile = false,\r\n  config = {},\r\n  singleTrack = false,\r\n  useRangeOnScrubBar = false,\r\n  useProgressOnScrubBar = false,\r\n  onLoad,\r\n  onPlay,\r\n  onPause,\r\n  onEnd,\r\n}: IProps) => {\r\n  const audioElem = React.useRef(null);\r\n  const timeElapsedElem = React.useRef(null);\r\n  const durationElem = React.useRef(null);\r\n\r\n  const [duration, setDuration] = React.useState(0);\r\n  const [timestamp, setTimestamp] = React.useState(0);\r\n  const [fileData, setFileData] = React.useState([]);\r\n  const [selectedFile, setSelectedFile] = React.useState(0);\r\n  const [progress, setProgress] = React.useState(0);\r\n  const [playing, setPlaying] = React.useState(false);\r\n  const [ended, setEnded] = React.useState(false);\r\n  const [muted, setMuted] = React.useState(false);\r\n  const [selectedLanguage, setSelectedLanguage] = React.useState(null);\r\n  const [showTrackListMenu, setShowTrackListMenu] = React.useState(false);\r\n  const [showSubtitleMenu, setShowSubtitleMenu] = React.useState(false);\r\n  const [videoMetadataLoaded, setVideoMetadataLoaded] = React.useState(false);\r\n\r\n  const captionsContainerId = `${id}__captions`;\r\n  const timeIndicatorId = `${id}__time-indicator`;\r\n  const durationIndicatorId = `${id}__duration-indicator`;\r\n  const tracklistId = `${id}__track-list`;\r\n  const subtitleMenuId = `${id}__subtitle-menu`;\r\n\r\n  const getTimestampString = (\r\n    seconds: number = 0,\r\n    isDuration: boolean = false,\r\n  ): string => {\r\n    if (typeof seconds !== 'number') {\r\n      return '';\r\n    }\r\n    if (\r\n      config.useHoursInTimestamps &&\r\n      ((isDuration && seconds >= 3600) || duration >= 3600)\r\n    ) {\r\n      return toHHMMSS(seconds.toString());\r\n    }\r\n    return toMMSS(seconds.toString());\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    audioElem.current.setAttribute('playsinline', 'playsinline');\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    setFileData(playlist);\r\n    setSelectedFile(0);\r\n  }, [playlist]);\r\n\r\n  const canPlayPrev = selectedFile > 0;\r\n  const canPlayNext = selectedFile < fileData.length - 1;\r\n\r\n  React.useEffect(() => {\r\n    audioElem.current.load();\r\n    audioElem.current.currentTime = 0;\r\n    setProgress(0);\r\n  }, [selectedFile]);\r\n\r\n  const selectTrack = (trackNumber: number) => {\r\n    setPlaying(false);\r\n    setEnded(false);\r\n    setVideoMetadataLoaded(false);\r\n    setSelectedFile(trackNumber);\r\n    if (typeof onLoad === 'function') {\r\n      onLoad({ fileData, selectedFile: trackNumber });\r\n    }\r\n  };\r\n\r\n  const hasVtt = (file: IPlaylistItem) => {\r\n    return file.transcriptUrl && file.transcriptUrl.length > 0;\r\n  };\r\n\r\n  const subtitleTracks = () => {\r\n    if (!videoMetadataLoaded) {\r\n      return [];\r\n    }\r\n    return audioElem.current.textTracks;\r\n  };\r\n\r\n  const playable = fileData && fileData.length && videoMetadataLoaded;\r\n\r\n  const selectSubtitleLanguage = (lang?: string) => {\r\n    setShowSubtitleMenu(false);\r\n    setSelectedLanguage(lang && lang.length ? lang : null);\r\n  };\r\n\r\n  const onLoadedMetadata = () => {\r\n    setVideoMetadataLoaded(true);\r\n    selectSubtitleLanguage(selectedLanguage);\r\n    setDuration(audioElem.current.duration);\r\n\r\n    // this.highlighter.selectedFile = this.state.selectedFile;\r\n    // this.highlighter.updateVideoElement(this.videoElement);\r\n    // this.highlighter.onVideoElementLoad();\r\n  };\r\n\r\n  const onTimeUpdate = () => {\r\n    if (duration > 0) {\r\n      const value = (100 / duration) * audioElem.current.currentTime;\r\n      setProgress(value);\r\n      setTimestamp(audioElem.current.currentTime);\r\n    }\r\n  };\r\n\r\n  const playPauseAction = () => {\r\n    if (!playable) {\r\n      return;\r\n    }\r\n    let newPlaying = false;\r\n    if (audioElem.current.paused) {\r\n      audioElem.current.play();\r\n      newPlaying = true;\r\n    } else {\r\n      audioElem.current.pause();\r\n    }\r\n    const currentTime = audioElem.current.currentTime;\r\n    setPlaying(newPlaying);\r\n    setTimestamp(currentTime);\r\n    if (eventRouter) {\r\n      eventRouter.emit('state.playing', newPlaying);\r\n    }\r\n    if (newPlaying) {\r\n      if (typeof onPlay === 'function') {\r\n        onPlay({ fileData, selectedFile, currentTime });\r\n      }\r\n    } else {\r\n      if (typeof onPause === 'function') {\r\n        onPause({ fileData, selectedFile, currentTime });\r\n      }\r\n    }\r\n  };\r\n\r\n  const nextTrackAction = () => {\r\n    if (canPlayNext) {\r\n      selectTrack(selectedFile + 1);\r\n    }\r\n  };\r\n\r\n  const nextTrackAndPlayAction = () => {\r\n    if (canPlayNext) {\r\n      nextTrackAction();\r\n      setTimeout(() => playPauseAction(), 500);\r\n    }\r\n  };\r\n\r\n  const onEnded = () => {\r\n    if (onEndNextFile) {\r\n      nextTrackAndPlayAction();\r\n      return;\r\n    }\r\n    setEnded(true);\r\n    const currentTime = audioElem.current.currentTime;\r\n    setTimestamp(currentTime);\r\n    if (eventRouter) {\r\n      eventRouter.emit('state.playing', false);\r\n      eventRouter.emit('state.ended', true);\r\n    }\r\n    if (typeof onEnd === 'function') {\r\n      onEnd({ fileData, selectedFile, currentTime });\r\n    }\r\n  };\r\n\r\n  const moveBackwardAction = () => {\r\n    if (!playable) {\r\n      return;\r\n    }\r\n    audioElem.current.currentTime -= config.rewindTime || 5;\r\n  };\r\n\r\n  const moveForwardAction = () => {\r\n    if (!playable) {\r\n      return;\r\n    }\r\n    audioElem.current.currentTime += config.fastForwardTime || 5;\r\n  };\r\n\r\n  const rewindAction = () => {\r\n    audioElem.current.currentTime = 0;\r\n    setEnded(false);\r\n    setTimestamp(audioElem.current.currentTime);\r\n    setProgress(0);\r\n    if (eventRouter) {\r\n      eventRouter.emit('state.ended', false);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    let i;\r\n    for (i = 0; i < audioElem.current.textTracks.length; i += 1) {\r\n      audioElem.current.textTracks[i].mode =\r\n        audioElem.current.textTracks[i].language === selectedLanguage\r\n          ? 'showing'\r\n          : 'hidden';\r\n    }\r\n  }, [selectedLanguage]);\r\n\r\n  const toggleMuteAction = () => {\r\n    const newMute = !audioElem.current.muted;\r\n    audioElem.current.muted = newMute;\r\n    setMuted(newMute);\r\n  };\r\n\r\n  const handleRemoteAction = (action: string) => {\r\n    if (action === 'backward') {\r\n      moveBackwardAction();\r\n    } else if (action === 'play_pause') {\r\n      playPauseAction();\r\n    } else if (action === 'reset') {\r\n      rewindAction();\r\n    } else if (action === 'forward') {\r\n      moveForwardAction();\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (eventRouter) {\r\n      eventRouter.on('remote.action', handleRemoteAction);\r\n    }\r\n    return () => {\r\n      if (eventRouter) {\r\n        eventRouter.off('remote.action', handleRemoteAction);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const currentFile = fileData[selectedFile] || null;\r\n\r\n  return (\r\n    <div className={CssClasses('video-wrapper', className)}>\r\n      <audio\r\n        className={CssClasses('video-element', className)}\r\n        data-oh-audio-player=\"1\"\r\n        crossOrigin={crossOrigin}\r\n        preload=\"metadata\"\r\n        ref={audioElem}\r\n        onLoadedMetadata={onLoadedMetadata}\r\n        onEnded={onEnded}\r\n        onTimeUpdate={onTimeUpdate}\r\n        aria-describedby={captionsContainerId}\r\n      >\r\n        {currentFile && <source src={currentFile.audioUrl} type=\"audio/mpeg\" />}\r\n        {currentFile && hasVtt(currentFile) && (\r\n          <track\r\n            src={currentFile.transcriptUrl}\r\n            kind=\"captions\"\r\n            label=\"English\"\r\n            srcLang=\"en\"\r\n          />\r\n        )}\r\n      </audio>\r\n\r\n      <div className={CssClasses('video-controls', className)}>\r\n        <ScrubBar\r\n          defaultValue={progress}\r\n          className={CssClasses('video-controls', className, 'progress-bar')}\r\n          onClick={(pos: number) => {\r\n            audioElem.current.currentTime = pos * duration;\r\n            setTimestamp(pos * duration);\r\n          }}\r\n          useTooltip={config.useTooltip || false}\r\n          useRange={useRangeOnScrubBar}\r\n          useProgress={useProgressOnScrubBar}\r\n          valueToTooltipString={(pos) =>\r\n            getTimestampString(\r\n              audioElem.current ? pos * audioElem.current.duration : 0,\r\n            )\r\n          }\r\n        />\r\n\r\n        <label className=\"sr-only\" htmlFor={timeIndicatorId}>\r\n          Time elapsed\r\n        </label>\r\n\r\n        <input\r\n          className={CssClasses('video-controls', className, 'time-elapsed')}\r\n          id={timeIndicatorId}\r\n          readOnly\r\n          ref={timeElapsedElem}\r\n          value={getTimestampString(timestamp)}\r\n        />\r\n\r\n        {config.showDuration && (\r\n          <>\r\n            <label className=\"sr-only\" htmlFor={durationIndicatorId}>\r\n              Duration\r\n            </label>\r\n\r\n            <input\r\n              className={CssClasses('video-controls', className, 'duration')}\r\n              id={durationIndicatorId}\r\n              readOnly\r\n              ref={durationElem}\r\n              value={getTimestampString(duration, true)}\r\n            />\r\n          </>\r\n        )}\r\n\r\n        <div className=\"w-100\" />\r\n\r\n        <div\r\n          className={CssClasses('video-controls', className, 'button-wrapper')}\r\n        >\r\n          <ToggleButton\r\n            btnType=\"tracklist\"\r\n            aria-controls={tracklistId}\r\n            enabled={fileData.length > 0 && !singleTrack}\r\n            onClick={() => {\r\n              setShowSubtitleMenu(false);\r\n              setShowTrackListMenu(!showTrackListMenu);\r\n            }}\r\n            toggleState={showTrackListMenu}\r\n            config={config}\r\n          >\r\n            Tracklist\r\n          </ToggleButton>\r\n\r\n          <div\r\n            className={CssClasses(\r\n              'video-controls',\r\n              className,\r\n              'button-wrapper__space',\r\n            )}\r\n          />\r\n\r\n          <ActionButton\r\n            btnType=\"previous-audio\"\r\n            enabled={fileData.length > 1 && canPlayPrev}\r\n            onClick={() => {\r\n              if (canPlayPrev) {\r\n                selectTrack(selectedFile - 1);\r\n              }\r\n            }}\r\n            config={config}\r\n          >\r\n            Previous track\r\n          </ActionButton>\r\n\r\n          <ActionButton\r\n            btnType=\"backward\"\r\n            onClick={moveBackwardAction}\r\n            config={config}\r\n          >\r\n            Rewind\r\n          </ActionButton>\r\n\r\n          <ToggleButton\r\n            btnType=\"play\"\r\n            hidden={ended}\r\n            onClick={playPauseAction}\r\n            toggleState={playing}\r\n            config={config}\r\n          >\r\n            {playing ? 'Pause' : 'Play'}\r\n          </ToggleButton>\r\n\r\n          <ActionButton\r\n            btnType=\"reset\"\r\n            enabled={ended}\r\n            hidden={!ended}\r\n            onClick={rewindAction}\r\n            config={config}\r\n          >\r\n            Restart\r\n          </ActionButton>\r\n\r\n          <ActionButton\r\n            btnType=\"forward\"\r\n            onClick={moveForwardAction}\r\n            config={config}\r\n          >\r\n            Fast forward\r\n          </ActionButton>\r\n\r\n          <ActionButton\r\n            btnType=\"next-audio\"\r\n            enabled={fileData.length > 1 && canPlayNext}\r\n            onClick={nextTrackAction}\r\n            config={config}\r\n          >\r\n            Next track\r\n          </ActionButton>\r\n\r\n          <ToggleButton\r\n            btnType=\"closed-captioning\"\r\n            aria-controls={subtitleMenuId}\r\n            enabled={videoMetadataLoaded && hasVtt(currentFile)}\r\n            onClick={() => {\r\n              setShowTrackListMenu(false);\r\n              setShowSubtitleMenu(!showSubtitleMenu);\r\n            }}\r\n            toggleState={showSubtitleMenu}\r\n            config={config}\r\n          >\r\n            Closed captioning\r\n          </ToggleButton>\r\n\r\n          <div\r\n            className={CssClasses(\r\n              'video-controls',\r\n              className,\r\n              'button-wrapper__space',\r\n            )}\r\n          />\r\n\r\n          <ToggleButton\r\n            btnType=\"mute\"\r\n            onClick={toggleMuteAction}\r\n            toggleState={muted}\r\n            config={config}\r\n          >\r\n            Mute\r\n          </ToggleButton>\r\n        </div>\r\n      </div>\r\n\r\n      <SubtitleMenu\r\n        visible={showSubtitleMenu}\r\n        id={subtitleMenuId}\r\n        tracks={subtitleTracks()}\r\n        selected={selectedLanguage}\r\n        onSelect={selectSubtitleLanguage}\r\n      />\r\n\r\n      <TracklistMenu\r\n        visible={!singleTrack && showTrackListMenu}\r\n        id={tracklistId}\r\n        tracklist={fileData}\r\n        selected={selectedFile}\r\n        onSelect={(trackNumber) => {\r\n          setShowTrackListMenu(false);\r\n          selectTrack(trackNumber);\r\n        }}\r\n      />\r\n\r\n      <SubtitleContainer\r\n        visible={selectedLanguage !== null}\r\n        lang={selectedLanguage}\r\n        tracks={subtitleTracks()}\r\n        id={captionsContainerId}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioPlayer;\r\n\r\nexport const defaultConfigs = {\r\n  FontAwesome5,\r\n};\r\n"],"names":["SrOnly","config","children","classNames","concat","React","className","join","CssClasses","defaultClassName","optionalClassName","suffix","states","split","filter","c","length","map","reduce","agg","s","state","ActionButton","enabled","hidden","btnType","onClick","iconClassNames","icons","iconElem","iconElements","disabled","clampNumber","num","min","max","Math","getOffsetXNative","e","container","offsetX","rect","getBoundingClientRect","type","pageX","left","targetTouches","getOffsetX","nativeEvent","touchE","target","ScrubBarTooltip","style","title","ScrubBarTooltipOuter","wrapperClassName","tooltipClassName","valueToTooltipString","defaultValue","show","outer","useRef","useState","value","setValue","outerWidth","current","clientWidth","content","ref","onMouseMove","ScrubBar","useTooltip","useRange","useProgress","id","label","scrubbing","hover","setHover","setOffsetX","lastUpdate","setLastUpdate","derivedId","debouncedOnClick","debounce","onDown","onUp","Date","getTime","onTouchMove","useEffect","document","addEventListener","removeEventListener","pos","onMouseOver","onMouseLeave","onMouseDown","onTouchStart","htmlFor","onChange","parseFloat","currentTarget","width","SubtitleContainer","track","visible","lang","tracks","text","setText","currentTrack","setCurrentTrack","cueChange","cue","i","activeCues","newText","kind","mode","language","cues","Menu","MenuItem","selected","onSelect","onKeyUp","key","SubtitleMenu","onSelectLang","selectedLang","getAttribute","languageOptions","push","ToggleButton","toggleState","iconClassNamesFalse","iconClassNamesTrue","iconElemFalse","iconElemTrue","TracklistMenu","tracklist","onSelectTrack","indexAttr","index","parseInt","trackOptions","strPadLeft","n","toString","playlist","eventRouter","crossOrigin","onEndNextFile","singleTrack","useRangeOnScrubBar","useProgressOnScrubBar","onLoad","onPlay","onPause","onEnd","audioElem","timeElapsedElem","durationElem","duration","setDuration","timestamp","setTimestamp","fileData","setFileData","selectedFile","setSelectedFile","progress","setProgress","playing","setPlaying","ended","setEnded","muted","setMuted","selectedLanguage","setSelectedLanguage","showTrackListMenu","setShowTrackListMenu","showSubtitleMenu","setShowSubtitleMenu","videoMetadataLoaded","setVideoMetadataLoaded","captionsContainerId","timeIndicatorId","durationIndicatorId","tracklistId","subtitleMenuId","getTimestampString","seconds","isDuration","useHoursInTimestamps","str","secNum","isNaN","hours","floor","minutes","toHHMMSS","toMMSS","setAttribute","canPlayPrev","canPlayNext","load","currentTime","selectTrack","trackNumber","hasVtt","file","transcriptUrl","subtitleTracks","textTracks","playable","selectSubtitleLanguage","playPauseAction","newPlaying","paused","play","pause","emit","nextTrackAction","moveBackwardAction","rewindTime","moveForwardAction","fastForwardTime","rewindAction","handleRemoteAction","action","on","off","currentFile","preload","onLoadedMetadata","onEnded","setTimeout","onTimeUpdate","src","audioUrl","srcLang","readOnly","showDuration","newMute"],"mappings":"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"}