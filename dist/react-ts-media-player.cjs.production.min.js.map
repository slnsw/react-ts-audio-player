{"version":3,"file":"react-ts-media-player.cjs.production.min.js","sources":["../src/SrOnly.tsx","../src/Util/CssClasses.ts","../src/ActionButton.tsx","../src/ScrubBar.tsx","../src/SubtitleContainer.tsx","../src/Menu.tsx","../src/MenuItem.tsx","../src/SubtitleMenu.tsx","../src/ToggleButton.tsx","../src/TracklistMenu.tsx","../src/TimeUtils.ts","../src/AudioPlayer.tsx"],"sourcesContent":["// @file\n// Screenreader only wrapper.\n\nimport React from 'react';\n\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IProps {\n  children?: React.ReactNode;\n  config?: IAudioPlayerConfig;\n}\n\nconst SrOnly: React.FunctionComponent<IProps> = ({ config = {}, children }) => {\n  const classNames = [].concat(config.classNames['sr-only'] || []);\n  return <span className={classNames.join(' ')}>{children}</span>;\n};\n\nexport default SrOnly;\n","// @file\n// Generate BEM-scoped CSS classes.\n\nconst CssClasses = (defaultClassName: string, optionalClassName: string = '', suffix: string = '', states: any[] = []): string => {\n  const classes = [].concat(defaultClassName.split(/\\s+/))\n    .concat(optionalClassName.split(/\\s+/))\n    .filter(c => c && c.length)\n    .map(c => suffix.length ? `${c}__${suffix}` : c);\n\n  return classes.reduce((agg, className) => agg\n    .concat([''].concat(states.filter(s => s && s.length))\n    .map(state => `${className}${state.length ? `--${state}` : ''}`)\n  ), []).join(' ');\n};\n\nexport default CssClasses;\n","// @file\n// Functional component for an action button.\n\nimport React from 'react';\n\nimport SrOnly from './SrOnly';\nimport CssClasses from './Util/CssClasses';\n\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IProps {\n  btnType: string;\n  enabled?: boolean;\n  hidden?: boolean;\n  onClick?: (e: React.MouseEvent) => void;\n  children?: React.ReactNode;\n  className?: string;\n  config?: IAudioPlayerConfig;\n}\n\nconst ActionButton: React.FunctionComponent<IProps> = ({\n  enabled = true,\n  hidden = false,\n  btnType,\n  onClick,\n  children,\n  className,\n  config = {},\n}) => {\n  const defaultClassName = (config.classNames[btnType] || []).join(' ');\n  const iconClassNames = (config.icons[btnType] || []).join(' ');\n  const iconElem = config.iconElements[btnType] || null;\n  return (\n    <button\n      className={CssClasses(defaultClassName, className || '')}\n      disabled={!enabled}\n      hidden={hidden}\n      onClick={onClick}\n    >\n      <SrOnly config={config}>{children}</SrOnly>\n      {!iconElem && <span className={CssClasses(iconClassNames, '')}></span>}\n      {iconElem}\n    </button>\n  );\n};\n\nexport default ActionButton;\n","// @file\n// Functional component for an action button.\n\nimport React from 'react';\n\ninterface IProps {\n  defaultValue: number;\n  className?: string;\n  onClick?: (pos: number) => void;\n}\n\nconst getOffsetX = (e: React.TouchEvent | React.MouseEvent) => {\n  if (typeof (e as React.MouseEvent).nativeEvent.offsetX === 'number') {\n    return (e as React.MouseEvent).nativeEvent.offsetX;\n  }\n  if (typeof (e as React.TouchEvent).targetTouches === 'object') {\n    const touchE = e as React.TouchEvent;\n    const rect = (touchE.target as HTMLDivElement).getBoundingClientRect();\n    return touchE.targetTouches[0].pageX - rect.left;\n  }\n  return 0;\n};\n\nconst ScrubBar: React.FunctionComponent<IProps> = ({\n  defaultValue = 0,\n  className,\n  onClick,\n}: IProps) => {\n  const outer = React.useRef(null);\n\n  const [value, setValue] = React.useState(defaultValue);\n  const [offsetX, setOffsetX] = React.useState(0);\n  const [scrubbing, setScrubbing] = React.useState(false);\n\n  React.useEffect(() => {\n    setValue(defaultValue);\n  }, [defaultValue]);\n\n  React.useEffect(() => {\n    if (scrubbing) {\n      const pos = offsetX / outer.current.clientWidth;\n      setValue(pos * 100);\n      if (typeof onClick === 'function') {\n        onClick(pos);\n      }\n    }\n  }, [scrubbing, offsetX]);\n\n  const onDown = (e: React.TouchEvent | React.MouseEvent) => {\n    setScrubbing(true);\n    setOffsetX(getOffsetX(e));\n  };\n\n  const onUp = () => setScrubbing(false);\n\n  return (\n    <div\n      className={[className || ''].join(' ')}\n      onMouseDown={onDown}\n      onMouseUp={onUp}\n      onMouseMove={(e: React.MouseEvent) => {\n        if (scrubbing) {\n          setOffsetX(getOffsetX(e));\n        }\n      }}\n      onTouchStart={onDown}\n      onTouchEnd={onUp}\n      onTouchMove={(e: React.TouchEvent) => {\n        if (scrubbing) {\n          setOffsetX(getOffsetX(e));\n        }\n      }}\n      ref={outer}\n    >\n      <div\n        className={[`${className}__fill`].join(' ')}\n        style={{ width: `${value}%` }}\n      >\n        <span className=\"sr-only\">{`${value} percent`}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ScrubBar;\n","// @file\n// Oral Histories subtitle menu.\n\nimport React from 'react';\n\nconst memoiseTrack = (track: TextTrack): string => {\n  if (!track) {\n    return '';\n  }\n  const { kind, mode, language, cues } = track;\n  return [kind, mode, language, cues.length].join(',');\n};\n\ninterface IProps {\n  visible?: boolean;\n  lang?: string;\n  tracks: TextTrack[];\n  id: string;\n  className?: string;\n}\n\nconst SubtitleContainer: React.FunctionComponent<IProps> = ({\n  visible = true,\n  lang,\n  tracks = [],\n  id,\n  className,\n}: IProps) => {\n  const [text, setText] = React.useState('');\n  const [currentTrack, setCurrentTrack] = React.useState(null);\n\n  const cueChange = (e: Event) => {\n    const { activeCues } = e.target as TextTrack;\n\n    let newText = '';\n    let cue;\n\n    let i;\n    for (i = 0; i < activeCues.length; i += 1) {\n      cue = activeCues[i];\n      if (typeof cue.text !== 'undefined') {\n        newText += cue.text;\n      }\n    }\n    setText(newText);\n  };\n\n  React.useEffect(() => {\n    if (currentTrack) {\n      currentTrack.addEventListener('cuechange', cueChange, false);\n    }\n    return () => {\n      if (currentTrack) {\n        currentTrack.removeEventListener('cuechange', cueChange, false);\n      }\n    };\n  }, [memoiseTrack(currentTrack)]);\n\n  React.useEffect(() => {\n    if (lang && lang.length && tracks && tracks.length) {\n      let track = null;\n      let i;\n      for (i = 0; i < tracks.length; i += 1) {\n        if (tracks[i].language === lang) {\n          track = tracks[i];\n          break;\n        }\n      }\n      setCurrentTrack(track);\n    }\n  }, [lang, tracks]);\n\n  return (\n    <div\n      className={[className || '', 'video-wrapper__subtitle-container'].join(\n        ' ',\n      )}\n      hidden={!visible}\n      aria-hidden={!visible}\n      lang={lang}\n      id={id}\n      aria-atomic=\"true\"\n      aria-live=\"polite\"\n      aria-relevant=\"additions text\"\n    >\n      {visible ? text : ' '}\n    </div>\n  );\n};\n\nexport default SubtitleContainer;\n","// @file\r\n// Menu container.\r\n\r\nimport React from 'react';\r\n\r\ninterface IProps {\r\n  id?: string;\r\n  visible?: boolean;\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst Menu: React.FunctionComponent<IProps> = ({\r\n  id,\r\n  visible = false,\r\n  className,\r\n  children,\r\n}: IProps) => {\r\n  return (\r\n    <ol\r\n      className={['video-wrapper__popup-menu', className || ''].join(' ')}\r\n      id={id}\r\n      hidden={!visible}\r\n      aria-expanded={visible}\r\n    >\r\n      {children}\r\n    </ol>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React from 'react';\n\ninterface IProps {\n  label: string;\n  value: string | number | null;\n  selected: boolean;\n  onSelect: (e: React.KeyboardEvent | React.MouseEvent) => void;\n}\n\nconst MenuItem: React.FunctionComponent<IProps> = ({\n  label,\n  value,\n  selected = false,\n  onSelect,\n}: IProps) => {\n  return (\n    <li>\n      <button\n        data-value={value}\n        data-state={selected ? 'active' : 'inactive'}\n        onClick={onSelect}\n        onKeyUp={(e) => {\n          if (e.key === 'Enter') {\n            onSelect(e);\n          }\n        }}\n      >\n        {label}\n      </button>\n    </li>\n  );\n};\n\nexport default MenuItem;\n","// @file\n// Oral Histories subtitle menu.\n\nimport React from 'react';\n\nimport Menu from './Menu';\nimport MenuItem from './MenuItem';\n\ninterface IProps {\n  visible: boolean;\n  id: string;\n  tracks: TextTrackList;\n  selected?: string;\n  onSelect: (selectedLang: string) => void;\n  className?: string;\n}\n\nconst SubtitleMenu: React.FunctionComponent<IProps> = ({\n  visible = false,\n  id,\n  tracks,\n  selected,\n  onSelect,\n  className,\n}: IProps) => {\n  const onSelectLang = (e: React.MouseEvent | React.KeyboardEvent) => {\n    const itemElem = e.target as HTMLElement;\n    const selectedLang = itemElem.getAttribute('data-value') || null;\n    if (typeof onSelect === 'function') {\n      onSelect(selectedLang);\n    }\n  };\n\n  const languageOptions = [\n    <MenuItem\n      key={'_none_'}\n      label={'Off'}\n      value={null}\n      selected={!selected}\n      onSelect={onSelectLang}\n    />,\n  ];\n  let track;\n  let i;\n  if (tracks && tracks.length) {\n    for (i = 0; i < tracks.length; i += 1) {\n      track = tracks[i];\n      languageOptions.push(\n        <MenuItem\n          key={`${track.language}-${i}`}\n          label={track.label}\n          value={track.language}\n          selected={selected && track.language === selected}\n          onSelect={onSelectLang}\n        />,\n      );\n    }\n  }\n\n  return (\n    <Menu\n      className={[className || '', 'subtitles-menu'].join(' ')}\n      id={id}\n      visible={visible}\n    >\n      {languageOptions}\n    </Menu>\n  );\n};\n\nexport default SubtitleMenu;\n","// @file\n// Functional component for a toggle button.\n\nimport React from 'react';\n\nimport SrOnly from './SrOnly';\nimport CssClasses from './Util/CssClasses';\n\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IProps {\n  enabled?: boolean;\n  hidden?: boolean;\n  btnType: string;\n  toggleState?: boolean;\n  children?: React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n  className?: string;\n  config?: IAudioPlayerConfig;\n}\n\nconst ToggleButton: React.FunctionComponent<IProps> = ({\n  enabled = true,\n  hidden = false,\n  btnType,\n  toggleState = false,\n  children,\n  onClick,\n  className,\n  config = {},\n}: IProps) => {\n  const defaultClassName = (config.classNames[btnType] || []).join(' ');\n  const iconClassNamesFalse = (config.icons[`${btnType}__false`] || []).join(' ');\n  const iconClassNamesTrue = (config.icons[`${btnType}__true`] || []).join(' ');\n  const iconElemFalse = config.iconElements[`${btnType}__false`] || null;\n  const iconElemTrue = config.iconElements[`${btnType}__true`] || null;\n  return (\n    <button\n      className={CssClasses(defaultClassName, className || '')}\n      disabled={!enabled}\n      hidden={hidden}\n      onClick={onClick}\n    >\n      <SrOnly config={config}>{children}</SrOnly>\n      {!toggleState && !iconElemFalse && (<span\n        className={CssClasses(iconClassNamesFalse)}\n      />)}\n      {!toggleState && iconElemFalse}\n      {toggleState && !iconElemTrue && (<span\n        className={CssClasses(iconClassNamesTrue)}\n      />)}\n      {toggleState && iconElemTrue}\n    </button>\n  );\n};\n\nexport default ToggleButton;\n","// @file\r\n// Oral Histories subtitle menu.\r\n\r\nimport React from 'react';\r\n\r\nimport Menu from './Menu';\r\nimport MenuItem from './MenuItem';\r\n\r\ninterface IProps {\r\n  tracklist?: AudioTrack[];\r\n  selected?: number;\r\n  onSelect?: (track: number) => void;\r\n  id?: string;\r\n  visible?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst TracklistMenu: React.FunctionComponent<IProps> = ({\r\n  tracklist = [],\r\n  selected = 0,\r\n  visible = false,\r\n  onSelect,\r\n  id,\r\n  className,\r\n}: IProps) => {\r\n  const onSelectTrack = (e: React.MouseEvent | React.KeyboardEvent) => {\r\n    const itemElem = e.target as HTMLElement;\r\n    const indexAttr = itemElem.getAttribute('data-value') || null;\r\n    if (indexAttr === null) {\r\n      return;\r\n    }\r\n    const index = parseInt(indexAttr, 10);\r\n    if (typeof onSelect === 'function') {\r\n      onSelect(index);\r\n    }\r\n  };\r\n\r\n  const trackOptions = tracklist.map((track: AudioTrack, index: number) => {\r\n    return (\r\n      <MenuItem\r\n        key={index}\r\n        label={track.label}\r\n        value={index}\r\n        selected={index === selected}\r\n        onSelect={onSelectTrack}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Menu\r\n      className={[className || '', 'track-menu'].join(' ')}\r\n      id={id}\r\n      visible={visible}\r\n    >\r\n      {trackOptions}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default TracklistMenu;\r\n","// @file\n// Time utilities.\n\nconst strPadLeft = (n: number): string => {\n  if (n < 10) {\n    return `0${n}`;\n  }\n  return n.toString();\n};\n\nexport const toHHMMSS = (str: string): string => {\n  const secNum = parseInt(str, 10);\n  const hours = Math.floor(secNum / 3600);\n  const minutes = Math.floor((secNum - hours * 3600) / 60);\n  const seconds = secNum - hours * 3600 - minutes * 60;\n\n  return `${strPadLeft(hours)}:${strPadLeft(minutes)}:${strPadLeft(seconds)}`;\n};\n\nexport const toMMSS = (str: string): string => {\n  const secNum = parseInt(str, 10);\n  const minutes = Math.floor(secNum / 60);\n  const seconds = secNum - minutes * 60;\n\n  return `${strPadLeft(minutes)}:${strPadLeft(seconds)}`;\n};\n","// @file\n// Audio player base component.\n\nimport Emitter from 'eventemitter3';\nimport React from 'react';\n\nimport ActionButton from './ActionButton';\nimport ScrubBar from './ScrubBar';\nimport SubtitleContainer from './SubtitleContainer';\nimport SubtitleMenu from './SubtitleMenu';\nimport ToggleButton from './ToggleButton';\nimport TracklistMenu from './TracklistMenu';\n\nimport FontAwesome5 from './Configs/FontAwesome5';\nimport CssClasses from './Util/CssClasses';\nimport { toHHMMSS, toMMSS } from './TimeUtils';\nimport { IAudioPlayerConfig } from './Types';\n\ninterface IPlaylistItem {\n  index: number;\n  label: string;\n  audioUrl: string;\n  transcriptUrl: string | null;\n}\n\ninterface IProps {\n  playlist: IPlaylistItem[];\n  id?: string;\n  className?: string;\n  eventRouter?: Emitter;\n  crossOrigin?: 'anonymous' | 'use-credentials';\n  onEndNextFile?: boolean;\n  config?: IAudioPlayerConfig;\n  singleTrack?: boolean;\n}\n\nconst AudioPlayer: React.FunctionComponent<IProps> = ({\n  playlist = [],\n  id = 'audio-player',\n  className,\n  eventRouter,\n  crossOrigin,\n  onEndNextFile = false,\n  config = {},\n  singleTrack = false,\n}: IProps) => {\n  const audioElem = React.useRef(null);\n  const timeElapsedElem = React.useRef(null);\n  const durationElem = React.useRef(null);\n\n  const [duration, setDuration] = React.useState(0);\n  const [timestamp, setTimestamp] = React.useState(0);\n  const [fileData, setFileData] = React.useState([]);\n  const [selectedFile, setSelectedFile] = React.useState(0);\n  const [progress, setProgress] = React.useState(0);\n  const [playing, setPlaying] = React.useState(false);\n  const [ended, setEnded] = React.useState(false);\n  const [muted, setMuted] = React.useState(false);\n  const [selectedLanguage, setSelectedLanguage] = React.useState(null);\n  const [showTrackListMenu, setShowTrackListMenu] = React.useState(false);\n  const [showSubtitleMenu, setShowSubtitleMenu] = React.useState(false);\n  const [videoMetadataLoaded, setVideoMetadataLoaded] = React.useState(false);\n\n  const captionsContainerId = `${id}__captions`;\n  const timeIndicatorId = `${id}__time-indicator`;\n  const durationIndicatorId = `${id}__duration-indicator`;\n  const tracklistId = `${id}__track-list`;\n  const subtitleMenuId = `${id}__subtitle-menu`;\n\n  const getTimestampString = (seconds: number = 0, isDuration: boolean = false): string => {\n    if (\n      config.useHoursInTimestamps\n      && ((isDuration && seconds >= 3600) || duration >= 3600)\n    ) {\n      return toHHMMSS(seconds.toString());\n    }\n    return toMMSS(seconds.toString());\n  };\n\n  React.useEffect(() => {\n    audioElem.current.setAttribute('playsinline', 'playsinline');\n  }, []);\n\n  React.useEffect(() => {\n    setFileData(playlist);\n    setSelectedFile(0);\n  }, [playlist]);\n\n  const canPlayPrev = selectedFile > 0;\n  const canPlayNext = selectedFile < fileData.length - 1;\n\n  React.useEffect(() => {\n    audioElem.current.load();\n    audioElem.current.currentTime = 0;\n    setProgress(0);\n  }, [selectedFile]);\n\n  const selectTrack = (trackNumber: number) => {\n    setPlaying(false);\n    setEnded(false);\n    setVideoMetadataLoaded(false);\n    setSelectedFile(trackNumber);\n  };\n\n  const hasVtt = (file: IPlaylistItem) => {\n    return file.transcriptUrl && file.transcriptUrl.length > 0;\n  };\n\n  const subtitleTracks = () => {\n    if (!videoMetadataLoaded) {\n      return [];\n    }\n    return audioElem.current.textTracks;\n  };\n\n  const playable = fileData && fileData.length && videoMetadataLoaded;\n\n  const selectSubtitleLanguage = (lang?: string) => {\n    setShowSubtitleMenu(false);\n    setSelectedLanguage(lang && lang.length ? lang : null);\n  };\n\n  const onLoadedMetadata = () => {\n    setVideoMetadataLoaded(true);\n    selectSubtitleLanguage(selectedLanguage);\n    setDuration(audioElem.current.duration);\n\n    // this.highlighter.selectedFile = this.state.selectedFile;\n    // this.highlighter.updateVideoElement(this.videoElement);\n    // this.highlighter.onVideoElementLoad();\n  };\n\n  const onTimeUpdate = () => {\n    if (duration > 0) {\n      const value =\n        (100 / duration) * audioElem.current.currentTime;\n      setProgress(value);\n      setTimestamp(audioElem.current.currentTime);\n    }\n  };\n\n  const playPauseAction = () => {\n    if (!playable) {\n      return;\n    }\n    let newPlaying = false;\n    if (audioElem.current.paused) {\n      audioElem.current.play();\n      newPlaying = true;\n    } else {\n      audioElem.current.pause();\n    }\n    setPlaying(newPlaying);\n    setTimestamp(audioElem.current.currentTime);\n    if (eventRouter) {\n      eventRouter.emit('state.playing', newPlaying);\n    }\n  };\n\n  const nextTrackAction = () => {\n    if (canPlayNext) {\n      selectTrack(selectedFile + 1);\n    }\n  };\n\n  const nextTrackAndPlayAction = () => {\n    if (canPlayNext) {\n      nextTrackAction();\n      setTimeout(() => playPauseAction(), 500);\n    }\n  };\n\n  const onEnded = () => {\n    if (onEndNextFile) {\n      nextTrackAndPlayAction();\n      return;\n    }\n    setEnded(true);\n    setTimestamp(audioElem.current.currentTime);\n    if (eventRouter) {\n      eventRouter.emit('state.playing', false);\n      eventRouter.emit('state.ended', true);\n    }\n  };\n\n  const moveBackwardAction = () => {\n    if (!playable) {\n      return;\n    }\n    audioElem.current.currentTime -= (config.rewindTime || 5);\n  };\n\n  const moveForwardAction = () => {\n    if (!playable) {\n      return;\n    }\n    audioElem.current.currentTime += (config.fastForwardTime || 5);\n  };\n\n  const rewindAction = () => {\n    audioElem.current.currentTime = 0;\n    setEnded(false);\n    setTimestamp(audioElem.current.currentTime);\n    setProgress(0);\n    if (eventRouter) {\n      eventRouter.emit('state.ended', false);\n    }\n  };\n\n  React.useEffect(() => {\n    let i;\n    for (i = 0; i < audioElem.current.textTracks.length; i += 1) {\n      audioElem.current.textTracks[i].mode =\n        audioElem.current.textTracks[i].language === selectedLanguage\n          ? 'showing'\n          : 'hidden';\n    }\n  }, [selectedLanguage]);\n\n  const toggleMuteAction = () => {\n    const newMute = !audioElem.current.muted;\n    audioElem.current.muted = newMute;\n    setMuted(newMute);\n  };\n\n  const handleRemoteAction = (action: string) => {\n    if (action === 'backward') {\n      moveBackwardAction();\n    } else if (action === 'play_pause') {\n      playPauseAction();\n    } else if (action === 'reset') {\n      rewindAction();\n    } else if (action === 'forward') {\n      moveForwardAction();\n    }\n  };\n\n  React.useEffect(() => {\n    if (eventRouter) {\n      eventRouter.on('remote.action', handleRemoteAction);\n    }\n    return () => {\n      if (eventRouter) {\n        eventRouter.off('remote.action', handleRemoteAction);\n      }\n    };\n  }, []);\n\n  const currentFile = fileData[selectedFile] || null;\n\n  return (\n    <div className={CssClasses('video-wrapper', className)}>\n      <audio\n        className={CssClasses('video-element', className)}\n        data-oh-audio-player=\"1\"\n        crossOrigin={crossOrigin}\n        preload=\"metadata\"\n        ref={audioElem}\n        onLoadedMetadata={onLoadedMetadata}\n        onEnded={onEnded}\n        onTimeUpdate={onTimeUpdate}\n        aria-describedby={captionsContainerId}\n      >\n        {currentFile && <source src={currentFile.audioUrl} type=\"audio/mpeg\" />}\n        {currentFile && hasVtt(currentFile) && (\n          <track\n            src={currentFile.transcriptUrl}\n            kind=\"captions\"\n            label=\"English\"\n            srcLang=\"en\"\n          />\n        )}\n      </audio>\n\n      <div className={CssClasses('video-controls', className)}>\n        <ScrubBar\n          defaultValue={progress}\n          className=\"video-controls__progress-bar\"\n          onClick={(pos: number) => {\n            audioElem.current.currentTime = pos * duration;\n          }}\n        />\n\n        <label className=\"sr-only\" htmlFor={timeIndicatorId}>\n          Time elapsed\n        </label>\n\n        <input\n          className={CssClasses('video-controls', className, 'time-elapsed')}\n          id={timeIndicatorId}\n          readOnly\n          ref={timeElapsedElem}\n          value={getTimestampString(timestamp)}\n        />\n\n        {config.showDuration && (\n          <>\n            <label className=\"sr-only\" htmlFor={durationIndicatorId}>\n              Duration\n            </label>\n\n            <input\n              className={CssClasses('video-controls', className, 'duration')}\n              id={durationIndicatorId}\n              readOnly\n              ref={durationElem}\n              value={getTimestampString(duration, true)}\n            />\n          </>\n        )}\n\n        <div className=\"w-100\" />\n\n        <div className={CssClasses('video-controls', className, 'button-wrapper')}>\n          <ToggleButton\n            btnType=\"tracklist\"\n            aria-controls={tracklistId}\n            enabled={fileData.length > 0 && !singleTrack}\n            onClick={() => {\n              setShowSubtitleMenu(false);\n              setShowTrackListMenu(!showTrackListMenu);\n            }}\n            toggleState={showTrackListMenu}\n            config={config}\n          >\n            Tracklist\n          </ToggleButton>\n\n          <div className={CssClasses('video-controls', className, 'button-wrapper__space')} />\n\n          <ActionButton\n            btnType=\"previous-audio\"\n            enabled={fileData.length > 1 && canPlayPrev}\n            onClick={() => {\n              if (canPlayPrev) {\n                selectTrack(selectedFile - 1);\n              }\n            }}\n            config={config}\n          >\n            Previous track\n          </ActionButton>\n\n          <ActionButton\n            btnType=\"backward\"\n            onClick={moveBackwardAction}\n            config={config}\n          >\n            Rewind\n          </ActionButton>\n\n          <ToggleButton\n            btnType=\"play\"\n            hidden={ended}\n            onClick={playPauseAction}\n            toggleState={playing}\n            config={config}\n          >\n            {playing ? 'Pause' : 'Play'}\n          </ToggleButton>\n\n          <ActionButton\n            btnType=\"reset\"\n            enabled={ended}\n            hidden={!ended}\n            onClick={rewindAction}\n            config={config}\n          >\n            Restart\n          </ActionButton>\n\n          <ActionButton\n            btnType=\"forward\"\n            onClick={moveForwardAction}\n            config={config}\n          >\n            Fast forward\n          </ActionButton>\n\n          <ActionButton\n            btnType=\"next-audio\"\n            enabled={fileData.length > 1 && canPlayNext}\n            onClick={nextTrackAction}\n            config={config}\n          >\n            Next track\n          </ActionButton>\n\n          <ToggleButton\n            btnType=\"closed-captioning\"\n            aria-controls={subtitleMenuId}\n            enabled={videoMetadataLoaded && hasVtt(currentFile)}\n            onClick={() => {\n              setShowTrackListMenu(false);\n              setShowSubtitleMenu(!showSubtitleMenu);\n            }}\n            toggleState={showSubtitleMenu}\n            config={config}\n          >\n            Closed captioning\n          </ToggleButton>\n\n          <div className={CssClasses('video-controls', className, 'button-wrapper__space')} />\n\n          <ToggleButton\n            btnType=\"mute\"\n            onClick={toggleMuteAction}\n            toggleState={muted}\n            config={config}\n          >\n            Mute\n          </ToggleButton>\n        </div>\n      </div>\n\n      <SubtitleMenu\n        visible={showSubtitleMenu}\n        id={subtitleMenuId}\n        tracks={subtitleTracks()}\n        selected={selectedLanguage}\n        onSelect={selectSubtitleLanguage}\n      />\n\n      <TracklistMenu\n        visible={!singleTrack && showTrackListMenu}\n        id={tracklistId}\n        tracklist={fileData}\n        selected={selectedFile}\n        onSelect={(trackNumber) => {\n          setShowTrackListMenu(false);\n          selectTrack(trackNumber);\n        }}\n      />\n\n      <SubtitleContainer\n        visible={selectedLanguage !== null}\n        lang={selectedLanguage}\n        tracks={subtitleTracks()}\n        id={captionsContainerId}\n      />\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n\nexport const defaultConfigs = {\n  FontAwesome5,\n};\n"],"names":["SrOnly","config","children","classNames","concat","React","className","join","CssClasses","defaultClassName","optionalClassName","suffix","states","split","filter","c","length","map","reduce","agg","s","state","ActionButton","enabled","hidden","btnType","onClick","iconClassNames","icons","iconElem","iconElements","disabled","getOffsetX","e","nativeEvent","offsetX","targetTouches","touchE","rect","target","getBoundingClientRect","pageX","left","ScrubBar","defaultValue","outer","useRef","useState","value","setValue","setOffsetX","scrubbing","setScrubbing","useEffect","pos","current","clientWidth","onDown","onUp","onMouseDown","onMouseUp","onMouseMove","onTouchStart","onTouchEnd","onTouchMove","ref","style","width","SubtitleContainer","track","visible","lang","tracks","id","text","setText","currentTrack","setCurrentTrack","cueChange","cue","i","activeCues","newText","addEventListener","removeEventListener","kind","mode","language","cues","Menu","MenuItem","selected","onSelect","onKeyUp","key","label","SubtitleMenu","onSelectLang","selectedLang","getAttribute","languageOptions","push","ToggleButton","toggleState","iconClassNamesFalse","iconClassNamesTrue","iconElemFalse","iconElemTrue","TracklistMenu","tracklist","onSelectTrack","indexAttr","index","parseInt","trackOptions","strPadLeft","n","toString","playlist","eventRouter","crossOrigin","onEndNextFile","singleTrack","audioElem","timeElapsedElem","durationElem","duration","setDuration","timestamp","setTimestamp","fileData","setFileData","selectedFile","setSelectedFile","progress","setProgress","playing","setPlaying","ended","setEnded","muted","setMuted","selectedLanguage","setSelectedLanguage","showTrackListMenu","setShowTrackListMenu","showSubtitleMenu","setShowSubtitleMenu","videoMetadataLoaded","setVideoMetadataLoaded","captionsContainerId","timeIndicatorId","durationIndicatorId","tracklistId","subtitleMenuId","getTimestampString","seconds","isDuration","useHoursInTimestamps","str","secNum","hours","Math","floor","minutes","toHHMMSS","toMMSS","setAttribute","canPlayPrev","canPlayNext","load","currentTime","selectTrack","trackNumber","hasVtt","file","transcriptUrl","subtitleTracks","textTracks","playable","selectSubtitleLanguage","playPauseAction","newPlaying","paused","play","pause","emit","nextTrackAction","moveBackwardAction","rewindTime","moveForwardAction","fastForwardTime","rewindAction","handleRemoteAction","action","on","off","currentFile","preload","onLoadedMetadata","onEnded","setTimeout","onTimeUpdate","src","audioUrl","type","srcLang","htmlFor","readOnly","showDuration","newMute"],"mappings":"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"}